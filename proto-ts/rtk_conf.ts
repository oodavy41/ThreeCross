// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "rtk_conf.proto" (package "autoplt.rtk", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message autoplt.rtk.rtkconf
 */
export interface rtkconf {
    /**
     * @generated from protobuf field: string mobile_node = 1;
     */
    mobileNode: string;
    /**
     * @generated from protobuf field: string mobile_channel = 2;
     */
    mobileChannel: string;
    /**
     * @generated from protobuf field: string datum_node = 3;
     */
    datumNode: string;
    /**
     * @generated from protobuf field: string datum_channel = 4;
     */
    datumChannel: string;
    /**
     * @generated from protobuf field: string gnss_config_path = 5;
     */
    gnssConfigPath: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class rtkconf$Type extends MessageType<rtkconf> {
    constructor() {
        super("autoplt.rtk.rtkconf", [
            { no: 1, name: "mobile_node", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "mobile_channel", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "datum_node", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "datum_channel", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "gnss_config_path", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<rtkconf>): rtkconf {
        const message = { mobileNode: "", mobileChannel: "", datumNode: "", datumChannel: "", gnssConfigPath: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<rtkconf>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: rtkconf): rtkconf {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string mobile_node */ 1:
                    message.mobileNode = reader.string();
                    break;
                case /* string mobile_channel */ 2:
                    message.mobileChannel = reader.string();
                    break;
                case /* string datum_node */ 3:
                    message.datumNode = reader.string();
                    break;
                case /* string datum_channel */ 4:
                    message.datumChannel = reader.string();
                    break;
                case /* string gnss_config_path */ 5:
                    message.gnssConfigPath = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: rtkconf, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string mobile_node = 1; */
        if (message.mobileNode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.mobileNode);
        /* string mobile_channel = 2; */
        if (message.mobileChannel !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.mobileChannel);
        /* string datum_node = 3; */
        if (message.datumNode !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.datumNode);
        /* string datum_channel = 4; */
        if (message.datumChannel !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.datumChannel);
        /* string gnss_config_path = 5; */
        if (message.gnssConfigPath !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.gnssConfigPath);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message autoplt.rtk.rtkconf
 */
export const rtkconf = new rtkconf$Type();
