// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "sm_radar_config.proto" (package "ec.radar", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ec.radar.RadarOutChannel
 */
export interface RadarOutChannel {
    /**
     * @generated from protobuf field: optional string radar_name = 1;
     */
    radarName?: string;
    /**
     * @generated from protobuf field: optional string radar_object_channel = 2;
     */
    radarObjectChannel?: string;
}
/**
 * @generated from protobuf message ec.radar.SMRadarConfig
 */
export interface SMRadarConfig {
    /**
     * @generated from protobuf field: optional bool enable_cout = 1;
     */
    enableCout?: boolean;
    /**
     * @generated from protobuf field: optional ec.radar.LogLevel radar_loglevel = 2;
     */
    radarLoglevel?: LogLevel;
    /**
     * @generated from protobuf field: optional string radar_logpath = 3;
     */
    radarLogpath?: string;
    /**
     * @generated from protobuf field: optional string radar_app_name = 4;
     */
    radarAppName?: string;
    /**
     * @generated from protobuf field: optional string radar_sensor_config_path_ = 5;
     */
    radarSensorConfigPath?: string;
    /**
     * @generated from protobuf field: repeated ec.radar.RadarOutChannel radar_out_msg = 6;
     */
    radarOutMsg: RadarOutChannel[];
}
/**
 * @generated from protobuf enum ec.radar.LogLevel
 */
export enum LogLevel {
    /**
     * @generated from protobuf enum value: LOGLEVEL_START = 0;
     */
    LOGLEVEL_START = 0,
    /**
     * @generated from protobuf enum value: FETAL = 1;
     */
    FETAL = 1,
    /**
     * @generated from protobuf enum value: ERROR = 2;
     */
    ERROR = 2,
    /**
     * @generated from protobuf enum value: WARNING = 3;
     */
    WARNING = 3,
    /**
     * @generated from protobuf enum value: NOTICE = 4;
     */
    NOTICE = 4,
    /**
     * @generated from protobuf enum value: DEBUG = 5;
     */
    DEBUG = 5,
    /**
     * @generated from protobuf enum value: LOGLEVEL_END = 6;
     */
    LOGLEVEL_END = 6
}
// @generated message type with reflection information, may provide speed optimized methods
class RadarOutChannel$Type extends MessageType<RadarOutChannel> {
    constructor() {
        super("ec.radar.RadarOutChannel", [
            { no: 1, name: "radar_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "radar_object_channel", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RadarOutChannel>): RadarOutChannel {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RadarOutChannel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RadarOutChannel): RadarOutChannel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string radar_name */ 1:
                    message.radarName = reader.string();
                    break;
                case /* optional string radar_object_channel */ 2:
                    message.radarObjectChannel = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RadarOutChannel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string radar_name = 1; */
        if (message.radarName !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.radarName);
        /* optional string radar_object_channel = 2; */
        if (message.radarObjectChannel !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.radarObjectChannel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ec.radar.RadarOutChannel
 */
export const RadarOutChannel = new RadarOutChannel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SMRadarConfig$Type extends MessageType<SMRadarConfig> {
    constructor() {
        super("ec.radar.SMRadarConfig", [
            { no: 1, name: "enable_cout", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "radar_loglevel", kind: "enum", opt: true, T: () => ["ec.radar.LogLevel", LogLevel] },
            { no: 3, name: "radar_logpath", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "radar_app_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "radar_sensor_config_path_", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "radar_out_msg", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RadarOutChannel }
        ]);
    }
    create(value?: PartialMessage<SMRadarConfig>): SMRadarConfig {
        const message = { radarOutMsg: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SMRadarConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SMRadarConfig): SMRadarConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool enable_cout */ 1:
                    message.enableCout = reader.bool();
                    break;
                case /* optional ec.radar.LogLevel radar_loglevel */ 2:
                    message.radarLoglevel = reader.int32();
                    break;
                case /* optional string radar_logpath */ 3:
                    message.radarLogpath = reader.string();
                    break;
                case /* optional string radar_app_name */ 4:
                    message.radarAppName = reader.string();
                    break;
                case /* optional string radar_sensor_config_path_ */ 5:
                    message.radarSensorConfigPath = reader.string();
                    break;
                case /* repeated ec.radar.RadarOutChannel radar_out_msg */ 6:
                    message.radarOutMsg.push(RadarOutChannel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SMRadarConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool enable_cout = 1; */
        if (message.enableCout !== undefined)
            writer.tag(1, WireType.Varint).bool(message.enableCout);
        /* optional ec.radar.LogLevel radar_loglevel = 2; */
        if (message.radarLoglevel !== undefined)
            writer.tag(2, WireType.Varint).int32(message.radarLoglevel);
        /* optional string radar_logpath = 3; */
        if (message.radarLogpath !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.radarLogpath);
        /* optional string radar_app_name = 4; */
        if (message.radarAppName !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.radarAppName);
        /* optional string radar_sensor_config_path_ = 5; */
        if (message.radarSensorConfigPath !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.radarSensorConfigPath);
        /* repeated ec.radar.RadarOutChannel radar_out_msg = 6; */
        for (let i = 0; i < message.radarOutMsg.length; i++)
            RadarOutChannel.internalBinaryWrite(message.radarOutMsg[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ec.radar.SMRadarConfig
 */
export const SMRadarConfig = new SMRadarConfig$Type();
