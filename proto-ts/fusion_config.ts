// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "fusion_config.proto" (package "autoplt.fusion", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message autoplt.fusion.FusionConfig
 */
export interface FusionConfig {
    /**
     * @generated from protobuf field: optional string class_fusion_method = 1;
     */
    classFusionMethod?: string;
    /**
     * @generated from protobuf field: optional string motion_fusion_method = 2;
     */
    motionFusionMethod?: string;
    /**
     * @generated from protobuf field: optional string shape_fusion_method = 3;
     */
    shapeFusionMethod?: string;
    /**
     * @generated from protobuf field: optional string existence_fusion_method = 4;
     */
    existenceFusionMethod?: string;
    /**
     * @generated from protobuf field: string association_method = 5;
     */
    associationMethod: string;
    /**
     * @generated from protobuf field: string fusion_output_channel = 6;
     */
    fusionOutputChannel: string;
    /**
     * @generated from protobuf field: optional int32 fusion_interval = 7;
     */
    fusionInterval?: number; // ms
    /**
     * @generated from protobuf field: optional float max_sensor_time_interval = 8;
     */
    maxSensorTimeInterval?: number; // max duration of object since detection [s];
    /**
     * @generated from protobuf field: float max_tracking_time = 9;
     */
    maxTrackingTime: number; // max duration of object since detection [s]
    /**
     * @generated from protobuf field: optional string class_fusion_config_file_path = 10;
     */
    classFusionConfigFilePath?: string;
    /**
     * @generated from protobuf field: optional string motion_fusion_config_file_path = 11;
     */
    motionFusionConfigFilePath?: string;
    /**
     * @generated from protobuf field: optional string shape_fusion_config_file_path = 12;
     */
    shapeFusionConfigFilePath?: string;
    /**
     * @generated from protobuf field: optional string existence_fusion_config_file_path = 13;
     */
    existenceFusionConfigFilePath?: string;
    /**
     * @generated from protobuf field: optional string association_config_file_path = 14;
     */
    associationConfigFilePath?: string;
    /**
     * @generated from protobuf field: optional bool use_async_processing = 15;
     */
    useAsyncProcessing?: boolean;
    /**
     * @generated from protobuf field: optional bool show_debug_info = 16;
     */
    showDebugInfo?: boolean;
    /**
     * @generated from protobuf field: optional autoplt.fusion.LogLevel loglevel = 17;
     */
    loglevel?: LogLevel;
    /**
     * @generated from protobuf field: optional string logpath = 18;
     */
    logpath?: string;
    /**
     * @generated from protobuf field: optional string component_config_file = 19;
     */
    componentConfigFile?: string;
    /**
     * @generated from protobuf field: repeated int32 unaddtrack_sensortypes = 20;
     */
    unaddtrackSensortypes: number[];
}
/**
 * @generated from protobuf enum autoplt.fusion.LogLevel
 */
export enum LogLevel {
    /**
     * @generated from protobuf enum value: LOGLEVEL_START = 0;
     */
    LOGLEVEL_START = 0,
    /**
     * @generated from protobuf enum value: FETAL = 1;
     */
    FETAL = 1,
    /**
     * @generated from protobuf enum value: ERROR = 2;
     */
    ERROR = 2,
    /**
     * @generated from protobuf enum value: WARNING = 3;
     */
    WARNING = 3,
    /**
     * @generated from protobuf enum value: NOTICE = 4;
     */
    NOTICE = 4,
    /**
     * @generated from protobuf enum value: DEBUG = 5;
     */
    DEBUG = 5,
    /**
     * @generated from protobuf enum value: LOGLEVEL_END = 6;
     */
    LOGLEVEL_END = 6
}
// @generated message type with reflection information, may provide speed optimized methods
class FusionConfig$Type extends MessageType<FusionConfig> {
    constructor() {
        super("autoplt.fusion.FusionConfig", [
            { no: 1, name: "class_fusion_method", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "motion_fusion_method", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "shape_fusion_method", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "existence_fusion_method", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "association_method", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "fusion_output_channel", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "fusion_interval", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "max_sensor_time_interval", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 9, name: "max_tracking_time", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 10, name: "class_fusion_config_file_path", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "motion_fusion_config_file_path", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "shape_fusion_config_file_path", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "existence_fusion_config_file_path", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "association_config_file_path", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "use_async_processing", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 16, name: "show_debug_info", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 17, name: "loglevel", kind: "enum", opt: true, T: () => ["autoplt.fusion.LogLevel", LogLevel] },
            { no: 18, name: "logpath", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "component_config_file", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "unaddtrack_sensortypes", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<FusionConfig>): FusionConfig {
        const message = { associationMethod: "", fusionOutputChannel: "", maxTrackingTime: 0, unaddtrackSensortypes: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FusionConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FusionConfig): FusionConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string class_fusion_method */ 1:
                    message.classFusionMethod = reader.string();
                    break;
                case /* optional string motion_fusion_method */ 2:
                    message.motionFusionMethod = reader.string();
                    break;
                case /* optional string shape_fusion_method */ 3:
                    message.shapeFusionMethod = reader.string();
                    break;
                case /* optional string existence_fusion_method */ 4:
                    message.existenceFusionMethod = reader.string();
                    break;
                case /* string association_method */ 5:
                    message.associationMethod = reader.string();
                    break;
                case /* string fusion_output_channel */ 6:
                    message.fusionOutputChannel = reader.string();
                    break;
                case /* optional int32 fusion_interval */ 7:
                    message.fusionInterval = reader.int32();
                    break;
                case /* optional float max_sensor_time_interval */ 8:
                    message.maxSensorTimeInterval = reader.float();
                    break;
                case /* float max_tracking_time */ 9:
                    message.maxTrackingTime = reader.float();
                    break;
                case /* optional string class_fusion_config_file_path */ 10:
                    message.classFusionConfigFilePath = reader.string();
                    break;
                case /* optional string motion_fusion_config_file_path */ 11:
                    message.motionFusionConfigFilePath = reader.string();
                    break;
                case /* optional string shape_fusion_config_file_path */ 12:
                    message.shapeFusionConfigFilePath = reader.string();
                    break;
                case /* optional string existence_fusion_config_file_path */ 13:
                    message.existenceFusionConfigFilePath = reader.string();
                    break;
                case /* optional string association_config_file_path */ 14:
                    message.associationConfigFilePath = reader.string();
                    break;
                case /* optional bool use_async_processing */ 15:
                    message.useAsyncProcessing = reader.bool();
                    break;
                case /* optional bool show_debug_info */ 16:
                    message.showDebugInfo = reader.bool();
                    break;
                case /* optional autoplt.fusion.LogLevel loglevel */ 17:
                    message.loglevel = reader.int32();
                    break;
                case /* optional string logpath */ 18:
                    message.logpath = reader.string();
                    break;
                case /* optional string component_config_file */ 19:
                    message.componentConfigFile = reader.string();
                    break;
                case /* repeated int32 unaddtrack_sensortypes */ 20:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unaddtrackSensortypes.push(reader.int32());
                    else
                        message.unaddtrackSensortypes.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FusionConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string class_fusion_method = 1; */
        if (message.classFusionMethod !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.classFusionMethod);
        /* optional string motion_fusion_method = 2; */
        if (message.motionFusionMethod !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.motionFusionMethod);
        /* optional string shape_fusion_method = 3; */
        if (message.shapeFusionMethod !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.shapeFusionMethod);
        /* optional string existence_fusion_method = 4; */
        if (message.existenceFusionMethod !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.existenceFusionMethod);
        /* string association_method = 5; */
        if (message.associationMethod !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.associationMethod);
        /* string fusion_output_channel = 6; */
        if (message.fusionOutputChannel !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.fusionOutputChannel);
        /* optional int32 fusion_interval = 7; */
        if (message.fusionInterval !== undefined)
            writer.tag(7, WireType.Varint).int32(message.fusionInterval);
        /* optional float max_sensor_time_interval = 8; */
        if (message.maxSensorTimeInterval !== undefined)
            writer.tag(8, WireType.Bit32).float(message.maxSensorTimeInterval);
        /* float max_tracking_time = 9; */
        if (message.maxTrackingTime !== 0)
            writer.tag(9, WireType.Bit32).float(message.maxTrackingTime);
        /* optional string class_fusion_config_file_path = 10; */
        if (message.classFusionConfigFilePath !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.classFusionConfigFilePath);
        /* optional string motion_fusion_config_file_path = 11; */
        if (message.motionFusionConfigFilePath !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.motionFusionConfigFilePath);
        /* optional string shape_fusion_config_file_path = 12; */
        if (message.shapeFusionConfigFilePath !== undefined)
            writer.tag(12, WireType.LengthDelimited).string(message.shapeFusionConfigFilePath);
        /* optional string existence_fusion_config_file_path = 13; */
        if (message.existenceFusionConfigFilePath !== undefined)
            writer.tag(13, WireType.LengthDelimited).string(message.existenceFusionConfigFilePath);
        /* optional string association_config_file_path = 14; */
        if (message.associationConfigFilePath !== undefined)
            writer.tag(14, WireType.LengthDelimited).string(message.associationConfigFilePath);
        /* optional bool use_async_processing = 15; */
        if (message.useAsyncProcessing !== undefined)
            writer.tag(15, WireType.Varint).bool(message.useAsyncProcessing);
        /* optional bool show_debug_info = 16; */
        if (message.showDebugInfo !== undefined)
            writer.tag(16, WireType.Varint).bool(message.showDebugInfo);
        /* optional autoplt.fusion.LogLevel loglevel = 17; */
        if (message.loglevel !== undefined)
            writer.tag(17, WireType.Varint).int32(message.loglevel);
        /* optional string logpath = 18; */
        if (message.logpath !== undefined)
            writer.tag(18, WireType.LengthDelimited).string(message.logpath);
        /* optional string component_config_file = 19; */
        if (message.componentConfigFile !== undefined)
            writer.tag(19, WireType.LengthDelimited).string(message.componentConfigFile);
        /* repeated int32 unaddtrack_sensortypes = 20; */
        for (let i = 0; i < message.unaddtrackSensortypes.length; i++)
            writer.tag(20, WireType.Varint).int32(message.unaddtrackSensortypes[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message autoplt.fusion.FusionConfig
 */
export const FusionConfig = new FusionConfig$Type();
