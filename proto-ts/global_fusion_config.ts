// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "global_fusion_config.proto" (package "autoplt.global_fusion_config", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message autoplt.global_fusion_config.FusionSensorConfig
 */
export interface FusionSensorConfig {
    /**
     * @generated from protobuf field: optional string sensor_out_channel = 1;
     */
    sensorOutChannel?: string;
    /**
     * @generated from protobuf field: optional autoplt.global_fusion_config.FusionSensorType sensor_type = 2;
     */
    sensorType?: FusionSensorType;
    /**
     * @generated from protobuf field: optional string sensor_id = 3;
     */
    sensorId?: string;
    /**
     * @generated from protobuf field: optional bool need_fusion = 4;
     */
    needFusion?: boolean;
    /**
     * @generated from protobuf field: optional bool need_display = 5;
     */
    needDisplay?: boolean;
    /**
     * @generated from protobuf field: optional float roi_x = 6;
     */
    roiX?: number;
    /**
     * @generated from protobuf field: optional float roi_y = 7;
     */
    roiY?: number;
    /**
     * @generated from protobuf field: optional bool need_transform = 8;
     */
    needTransform?: boolean;
    /**
     * @generated from protobuf field: optional string transform_param_file = 9;
     */
    transformParamFile?: string;
    /**
     * @generated from protobuf field: optional int32 save_frames = 10;
     */
    saveFrames?: number; // for test
    /**
     * @generated from protobuf field: optional bool use_sersor_timestamp = 11;
     */
    useSersorTimestamp?: boolean;
}
/**
 * @generated from protobuf message autoplt.global_fusion_config.GlobalFusionConfig
 */
export interface GlobalFusionConfig {
    /**
     * @generated from protobuf field: repeated autoplt.global_fusion_config.FusionSensorConfig fusion_sensors = 1;
     */
    fusionSensors: FusionSensorConfig[];
    /**
     * @generated from protobuf field: optional string global_fusion_in_channel = 2;
     */
    globalFusionInChannel?: string;
    /**
     * @generated from protobuf field: optional string global_fusion_out_channel = 3;
     */
    globalFusionOutChannel?: string;
    /**
     * @generated from protobuf field: optional string fusion_result_display_channel = 4;
     */
    fusionResultDisplayChannel?: string;
    /**
     * @generated from protobuf field: optional string fusion_result_event_channel = 5;
     */
    fusionResultEventChannel?: string;
    /**
     * @generated from protobuf field: optional string fusion_result_server_channel = 6;
     */
    fusionResultServerChannel?: string;
    /**
     * @generated from protobuf field: optional string display_config_file_path = 7;
     */
    displayConfigFilePath?: string;
    /**
     * @generated from protobuf field: optional string param_path = 8;
     */
    paramPath?: string;
    /**
     * @generated from protobuf field: optional bool show_fusion_object = 9;
     */
    showFusionObject?: boolean;
    /**
     * @generated from protobuf field: optional float interval = 10;
     */
    interval?: number;
    /**
     * @generated from protobuf field: optional bool show_debug_info = 11;
     */
    showDebugInfo?: boolean;
    /**
     * @generated from protobuf field: optional int32 node_id = 12;
     */
    nodeId?: number;
    /**
     * @generated from protobuf field: optional string rtk_config_file = 13;
     */
    rtkConfigFile?: string;
}
/**
 * @generated from protobuf enum autoplt.global_fusion_config.FusionSensorType
 */
export enum FusionSensorType {
    /**
     * @generated from protobuf enum value: UNKNOWN_TYPE = 0;
     */
    UNKNOWN_TYPE = 0,
    /**
     * @generated from protobuf enum value: FUSION = 1;
     */
    FUSION = 1,
    /**
     * @generated from protobuf enum value: CAMERA = 2;
     */
    CAMERA = 2,
    /**
     * @generated from protobuf enum value: RADAR = 3;
     */
    RADAR = 3,
    /**
     * @generated from protobuf enum value: LIDAR = 4;
     */
    LIDAR = 4,
    /**
     * @generated from protobuf enum value: ULTRASONIC = 5;
     */
    ULTRASONIC = 5
}
// @generated message type with reflection information, may provide speed optimized methods
class FusionSensorConfig$Type extends MessageType<FusionSensorConfig> {
    constructor() {
        super("autoplt.global_fusion_config.FusionSensorConfig", [
            { no: 1, name: "sensor_out_channel", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sensor_type", kind: "enum", opt: true, T: () => ["autoplt.global_fusion_config.FusionSensorType", FusionSensorType] },
            { no: 3, name: "sensor_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "need_fusion", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "need_display", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "roi_x", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 7, name: "roi_y", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 8, name: "need_transform", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "transform_param_file", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "save_frames", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "use_sersor_timestamp", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<FusionSensorConfig>): FusionSensorConfig {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FusionSensorConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FusionSensorConfig): FusionSensorConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string sensor_out_channel */ 1:
                    message.sensorOutChannel = reader.string();
                    break;
                case /* optional autoplt.global_fusion_config.FusionSensorType sensor_type */ 2:
                    message.sensorType = reader.int32();
                    break;
                case /* optional string sensor_id */ 3:
                    message.sensorId = reader.string();
                    break;
                case /* optional bool need_fusion */ 4:
                    message.needFusion = reader.bool();
                    break;
                case /* optional bool need_display */ 5:
                    message.needDisplay = reader.bool();
                    break;
                case /* optional float roi_x */ 6:
                    message.roiX = reader.float();
                    break;
                case /* optional float roi_y */ 7:
                    message.roiY = reader.float();
                    break;
                case /* optional bool need_transform */ 8:
                    message.needTransform = reader.bool();
                    break;
                case /* optional string transform_param_file */ 9:
                    message.transformParamFile = reader.string();
                    break;
                case /* optional int32 save_frames */ 10:
                    message.saveFrames = reader.int32();
                    break;
                case /* optional bool use_sersor_timestamp */ 11:
                    message.useSersorTimestamp = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FusionSensorConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string sensor_out_channel = 1; */
        if (message.sensorOutChannel !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.sensorOutChannel);
        /* optional autoplt.global_fusion_config.FusionSensorType sensor_type = 2; */
        if (message.sensorType !== undefined)
            writer.tag(2, WireType.Varint).int32(message.sensorType);
        /* optional string sensor_id = 3; */
        if (message.sensorId !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.sensorId);
        /* optional bool need_fusion = 4; */
        if (message.needFusion !== undefined)
            writer.tag(4, WireType.Varint).bool(message.needFusion);
        /* optional bool need_display = 5; */
        if (message.needDisplay !== undefined)
            writer.tag(5, WireType.Varint).bool(message.needDisplay);
        /* optional float roi_x = 6; */
        if (message.roiX !== undefined)
            writer.tag(6, WireType.Bit32).float(message.roiX);
        /* optional float roi_y = 7; */
        if (message.roiY !== undefined)
            writer.tag(7, WireType.Bit32).float(message.roiY);
        /* optional bool need_transform = 8; */
        if (message.needTransform !== undefined)
            writer.tag(8, WireType.Varint).bool(message.needTransform);
        /* optional string transform_param_file = 9; */
        if (message.transformParamFile !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.transformParamFile);
        /* optional int32 save_frames = 10; */
        if (message.saveFrames !== undefined)
            writer.tag(10, WireType.Varint).int32(message.saveFrames);
        /* optional bool use_sersor_timestamp = 11; */
        if (message.useSersorTimestamp !== undefined)
            writer.tag(11, WireType.Varint).bool(message.useSersorTimestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message autoplt.global_fusion_config.FusionSensorConfig
 */
export const FusionSensorConfig = new FusionSensorConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GlobalFusionConfig$Type extends MessageType<GlobalFusionConfig> {
    constructor() {
        super("autoplt.global_fusion_config.GlobalFusionConfig", [
            { no: 1, name: "fusion_sensors", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => FusionSensorConfig },
            { no: 2, name: "global_fusion_in_channel", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "global_fusion_out_channel", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "fusion_result_display_channel", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "fusion_result_event_channel", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "fusion_result_server_channel", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "display_config_file_path", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "param_path", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "show_fusion_object", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "interval", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 11, name: "show_debug_info", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "node_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "rtk_config_file", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GlobalFusionConfig>): GlobalFusionConfig {
        const message = { fusionSensors: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GlobalFusionConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GlobalFusionConfig): GlobalFusionConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated autoplt.global_fusion_config.FusionSensorConfig fusion_sensors */ 1:
                    message.fusionSensors.push(FusionSensorConfig.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional string global_fusion_in_channel */ 2:
                    message.globalFusionInChannel = reader.string();
                    break;
                case /* optional string global_fusion_out_channel */ 3:
                    message.globalFusionOutChannel = reader.string();
                    break;
                case /* optional string fusion_result_display_channel */ 4:
                    message.fusionResultDisplayChannel = reader.string();
                    break;
                case /* optional string fusion_result_event_channel */ 5:
                    message.fusionResultEventChannel = reader.string();
                    break;
                case /* optional string fusion_result_server_channel */ 6:
                    message.fusionResultServerChannel = reader.string();
                    break;
                case /* optional string display_config_file_path */ 7:
                    message.displayConfigFilePath = reader.string();
                    break;
                case /* optional string param_path */ 8:
                    message.paramPath = reader.string();
                    break;
                case /* optional bool show_fusion_object */ 9:
                    message.showFusionObject = reader.bool();
                    break;
                case /* optional float interval */ 10:
                    message.interval = reader.float();
                    break;
                case /* optional bool show_debug_info */ 11:
                    message.showDebugInfo = reader.bool();
                    break;
                case /* optional int32 node_id */ 12:
                    message.nodeId = reader.int32();
                    break;
                case /* optional string rtk_config_file */ 13:
                    message.rtkConfigFile = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GlobalFusionConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated autoplt.global_fusion_config.FusionSensorConfig fusion_sensors = 1; */
        for (let i = 0; i < message.fusionSensors.length; i++)
            FusionSensorConfig.internalBinaryWrite(message.fusionSensors[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional string global_fusion_in_channel = 2; */
        if (message.globalFusionInChannel !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.globalFusionInChannel);
        /* optional string global_fusion_out_channel = 3; */
        if (message.globalFusionOutChannel !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.globalFusionOutChannel);
        /* optional string fusion_result_display_channel = 4; */
        if (message.fusionResultDisplayChannel !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.fusionResultDisplayChannel);
        /* optional string fusion_result_event_channel = 5; */
        if (message.fusionResultEventChannel !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.fusionResultEventChannel);
        /* optional string fusion_result_server_channel = 6; */
        if (message.fusionResultServerChannel !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.fusionResultServerChannel);
        /* optional string display_config_file_path = 7; */
        if (message.displayConfigFilePath !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.displayConfigFilePath);
        /* optional string param_path = 8; */
        if (message.paramPath !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.paramPath);
        /* optional bool show_fusion_object = 9; */
        if (message.showFusionObject !== undefined)
            writer.tag(9, WireType.Varint).bool(message.showFusionObject);
        /* optional float interval = 10; */
        if (message.interval !== undefined)
            writer.tag(10, WireType.Bit32).float(message.interval);
        /* optional bool show_debug_info = 11; */
        if (message.showDebugInfo !== undefined)
            writer.tag(11, WireType.Varint).bool(message.showDebugInfo);
        /* optional int32 node_id = 12; */
        if (message.nodeId !== undefined)
            writer.tag(12, WireType.Varint).int32(message.nodeId);
        /* optional string rtk_config_file = 13; */
        if (message.rtkConfigFile !== undefined)
            writer.tag(13, WireType.LengthDelimited).string(message.rtkConfigFile);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message autoplt.global_fusion_config.GlobalFusionConfig
 */
export const GlobalFusionConfig = new GlobalFusionConfig$Type();
