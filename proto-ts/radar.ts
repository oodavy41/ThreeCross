// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "radar.proto" (package "ec.radar", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ec.radar.RadarCanfd
 */
export interface RadarCanfd {
    /**
     * @generated from protobuf field: optional ec.radar.Header header = 1;
     */
    header?: Header;
    /**
     * @generated from protobuf field: optional uint32 id = 2;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional uint32 length = 3;
     */
    length?: number;
    /**
     * @generated from protobuf field: optional bytes data = 4;
     */
    data?: Uint8Array;
}
/**
 * @generated from protobuf message ec.radar.Header
 */
export interface Header {
    /**
     * @generated from protobuf field: optional uint32 seq = 1;
     */
    seq?: number;
    /**
     * @generated from protobuf field: optional uint64 timestamp = 2;
     */
    timestamp?: bigint;
    /**
     * @generated from protobuf field: optional string frame_id = 3;
     */
    frameId?: string;
}
/**
 * @generated from protobuf message ec.radar.CLASSIFICATION
 */
export interface CLASSIFICATION {
    /**
     * @generated from protobuf field: optional string obj_class = 1;
     */
    objClass?: string;
    /**
     * @generated from protobuf field: optional float confidence_class = 2;
     */
    confidenceClass?: number;
}
/**
 * @generated from protobuf message ec.radar.BBOX
 */
export interface BBOX {
    /**
     * @generated from protobuf field: optional float x1 = 1;
     */
    x1?: number;
    /**
     * @generated from protobuf field: optional float y1 = 2;
     */
    y1?: number;
    /**
     * @generated from protobuf field: optional float x2 = 3;
     */
    x2?: number;
    /**
     * @generated from protobuf field: optional float y2 = 4;
     */
    y2?: number; // left-top, right-bottom
}
/**
 * @generated from protobuf message ec.radar.Time
 */
export interface Time {
    /**
     * @generated from protobuf field: optional int32 sec = 1;
     */
    sec?: number;
    /**
     * @generated from protobuf field: optional int32 nsec = 2;
     */
    nsec?: number;
}
/**
 * vehicle status of one timestamp
 *
 * @generated from protobuf message ec.radar.BSTVECHILESTATUS
 */
export interface BSTVECHILESTATUS {
    /**
     * @generated from protobuf field: optional ec.radar.BBOX bbox = 1;
     */
    bbox?: BBOX; // network output
    /**
     * @generated from protobuf field: optional ec.radar.BBOX bboxglobal = 2;
     */
    bboxglobal?: BBOX; // fusion output
    /**
     * @generated from protobuf field: optional int64 radar_id = 3;
     */
    radarId?: bigint;
    /**
     * @generated from protobuf field: optional float radar_id_p = 4;
     */
    radarIdP?: number;
    /**
     * @generated from protobuf field: optional int64 cd_id = 5;
     */
    cdId?: bigint;
    /**
     * @generated from protobuf field: optional float cv_id_p = 6;
     */
    cvIdP?: number;
    /**
     * @generated from protobuf field: optional float confidence = 7;
     */
    confidence?: number; // network output
    /**
     * @generated from protobuf field: optional float x_offset = 8;
     */
    xOffset?: number;
    /**
     * @generated from protobuf field: repeated ec.radar.CLASSIFICATION classification = 9;
     */
    classification: CLASSIFICATION[]; // network output
    /**
     * @generated from protobuf field: optional float width = 10;
     */
    width?: number; // fusion output
    /**
     * @generated from protobuf field: optional float length = 11;
     */
    length?: number; // fusion output
    /**
     * @generated from protobuf field: optional float height = 12;
     */
    height?: number; // fusion output
    /**
     * @generated from protobuf field: optional float width_var = 13;
     */
    widthVar?: number; // fusion output
    /**
     * @generated from protobuf field: optional float length_var = 14;
     */
    lengthVar?: number; // fusion output
    /**
     * @generated from protobuf field: optional float height_var = 15;
     */
    heightVar?: number;
    /**
     * @generated from protobuf field: optional double position_cx = 16;
     */
    positionCx?: number; // fusion output
    /**
     * @generated from protobuf field: optional double position_cy = 17;
     */
    positionCy?: number; // fusion output
    /**
     * @generated from protobuf field: optional float yaw = 18;
     */
    yaw?: number; // fusion output
    /**
     * @generated from protobuf field: optional float yaw_rate = 19;
     */
    yawRate?: number; // fusion output
    /**
     * @generated from protobuf field: optional double velocity_x = 20;
     */
    velocityX?: number; // fusion output
    /**
     * @generated from protobuf field: optional double velocity_y = 21;
     */
    velocityY?: number; // fusion output
    /**
     * @generated from protobuf field: optional double velocity_x_var = 22;
     */
    velocityXVar?: number;
    /**
     * @generated from protobuf field: optional double velocity_y_var = 23;
     */
    velocityYVar?: number;
    /**
     * @generated from protobuf field: optional double acceleration_x = 24;
     */
    accelerationX?: number; // fusion output
    /**
     * @generated from protobuf field: optional double acceleration_y = 25;
     */
    accelerationY?: number; // fusion output
}
/**
 * @generated from protobuf message ec.radar.ROADCVOBJECT
 */
export interface ROADCVOBJECT {
    /**
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number; // network output
    /**
     * @generated from protobuf field: ec.radar.Time time_stamp = 2;
     */
    timeStamp?: Time; // sys read input
    /**
     * @generated from protobuf field: ec.radar.BSTVECHILESTATUS status = 3;
     */
    status?: BSTVECHILESTATUS;
}
/**
 * @generated from protobuf message ec.radar.ROADCV_OBJECT_LIST
 */
export interface ROADCV_OBJECT_LIST {
    /**
     * @generated from protobuf field: optional ec.radar.Header header = 1;
     */
    header?: Header;
    /**
     * @generated from protobuf field: int32 objectnum = 2;
     */
    objectnum: number; // total number of current detected objects
    /**
     * @generated from protobuf field: repeated ec.radar.ROADCVOBJECT objectlist = 3;
     */
    objectlist: ROADCVOBJECT[]; // vector of objects
}
/**
 * @generated from protobuf message ec.radar.LocationInterface
 */
export interface LocationInterface {
    /**
     * @generated from protobuf field: optional ec.radar.Header header = 1;
     */
    header?: Header;
    /**
     * @generated from protobuf field: optional float radar_ecu_timestamp = 2;
     */
    radarEcuTimestamp?: number;
    /**
     * @generated from protobuf field: repeated ec.radar.Location raw_locations = 3;
     */
    rawLocations: Location[];
    /**
     * @generated from protobuf field: optional ec.radar.SensingState sensing_state = 4;
     */
    sensingState?: SensingState;
}
/**
 * @generated from protobuf message ec.radar.Blindness
 */
export interface Blindness {
    /**
     * Number of detection threshold bins
     *
     * @generated from protobuf field: optional uint32 num_bins_detection_threshold = 1;
     */
    numBinsDetectionThreshold?: number;
    /**
     * @generated from protobuf field: optional bool num_bins_detection_thresold_valid = 2;
     */
    numBinsDetectionThresoldValid?: boolean;
    /**
     * Two-Target-Rate indicator
     *
     * @generated from protobuf field: optional uint32 two_target_rate_indicator = 3;
     */
    twoTargetRateIndicator?: number;
    /**
     * @generated from protobuf field: optional bool two_target_rate_indicator_valid = 4;
     */
    twoTargetRateIndicatorValid?: boolean;
    /**
     * RCS model deviation for moving objects
     *
     * @generated from protobuf field: optional uint32 rcs_moving_object_model_deviation_indicator = 5;
     */
    rcsMovingObjectModelDeviationIndicator?: number;
    /**
     * @generated from protobuf field: optional bool rcs_moving_object_model_deviation_indicator_valid = 6;
     */
    rcsMovingObjectModelDeviationIndicatorValid?: boolean;
    /**
     * Azimuth model deviation for moving objects
     *
     * @generated from protobuf field: optional uint32 azimuth_moving_object_model_deviation = 7;
     */
    azimuthMovingObjectModelDeviation?: number;
    /**
     * @generated from protobuf field: optional bool azimuth_moving_object_model_deviation_valid = 8;
     */
    azimuthMovingObjectModelDeviationValid?: boolean;
    /**
     * Azimuth model deviation for static objects
     *
     * @generated from protobuf field: optional uint32 azimuth_static_object_model_deviation = 9;
     */
    azimuthStaticObjectModelDeviation?: number;
    /**
     * @generated from protobuf field: optional bool azimuth_static_object_model_deviation_valid = 10;
     */
    azimuthStaticObjectModelDeviationValid?: boolean;
}
/**
 * @generated from protobuf message ec.radar.FieldOfView
 */
export interface FieldOfView {
    /**
     * Azimuth FoV
     *
     * @generated from protobuf field: repeated float maximum_fov_range_azimuth = 1;
     */
    maximumFovRangeAzimuth: number[]; // 25
    /**
     * @generated from protobuf field: repeated float fov_azimuth_angles = 2;
     */
    fovAzimuthAngles: number[]; // 25
    /**
     * Elevation FoV
     *
     * @generated from protobuf field: repeated float range_scaling_elevation = 3;
     */
    rangeScalingElevation: number[]; // 11
    /**
     * @generated from protobuf field: repeated float fov_elevation_angles = 4;
     */
    fovElevationAngles: number[]; // 11
}
/**
 * @generated from protobuf message ec.radar.InterferenceStatus
 */
export interface InterferenceStatus {
    /**
     * @generated from protobuf field: optional ec.radar.IndicatorStatus indicator_status = 1;
     */
    indicatorStatus?: IndicatorStatus;
    /**
     * @generated from protobuf field: optional float field_of_view_reduction = 2;
     */
    fieldOfViewReduction?: number;
}
/**
 * @generated from protobuf message ec.radar.Misalignment
 */
export interface Misalignment {
    /**
     * @generated from protobuf field: optional ec.radar.EstimationStatus estimation_status = 1;
     */
    estimationStatus?: EstimationStatus;
    /**
     * Azimuth angle
     *
     * @generated from protobuf field: optional float azimuth_angle_misalignment = 2;
     */
    azimuthAngleMisalignment?: number;
    /**
     * @generated from protobuf field: optional float azimuth_angle_misalignment_variance = 3;
     */
    azimuthAngleMisalignmentVariance?: number;
    /**
     * Elevation angle
     *
     * @generated from protobuf field: optional float elevation_angle_misalignment = 4;
     */
    elevationAngleMisalignment?: number;
    /**
     * @generated from protobuf field: optional float elevation_angle_misalignment_variance = 5;
     */
    elevationAngleMisalignmentVariance?: number;
}
/**
 * @generated from protobuf message ec.radar.SensingState
 */
export interface SensingState {
    /**
     * @generated from protobuf field: optional ec.radar.OperationMode operation_mode = 1;
     */
    operationMode?: OperationMode;
    /**
     * @generated from protobuf field: optional ec.radar.MeasurementState measurement_state = 2;
     */
    measurementState?: MeasurementState;
    /**
     * distance range scaling factor for FoV from modulation
     *            (distance degradation due to thermal degradation, noise increase)
     *            1: full range
     *            0.93: range reduction if 75% of ramps are used
     *            0.84: range reduction if 50% of ramps are used
     *
     * @generated from protobuf field: optional float thermal_degredation_factor = 3;
     */
    thermalDegredationFactor?: number;
    /**
     * @generated from protobuf field: optional ec.radar.Blindness blindness = 4;
     */
    blindness?: Blindness;
    /**
     * @generated from protobuf field: optional ec.radar.FieldOfView field_of_view = 5;
     */
    fieldOfView?: FieldOfView;
    /**
     * @generated from protobuf field: optional ec.radar.InterferenceStatus interference_status = 6;
     */
    interferenceStatus?: InterferenceStatus;
    /**
     * @generated from protobuf field: optional ec.radar.Misalignment misalignment = 7;
     */
    misalignment?: Misalignment;
    /**
     * @generated from protobuf field: optional ec.radar.ModulationPerformance modulation_performance = 8;
     */
    modulationPerformance?: ModulationPerformance;
}
/**
 * @generated from protobuf message ec.radar.ModulationPerformance
 */
export interface ModulationPerformance {
    /**
     * @generated from protobuf field: optional uint32 active_detection_measurement_program_id = 1;
     */
    activeDetectionMeasurementProgramId?: number;
    /**
     * @generated from protobuf field: optional uint32 active_modulation_id = 2;
     */
    activeModulationId?: number;
    /**
     * @generated from protobuf field: optional float fov_distance_range_scaling_factor = 3;
     */
    fovDistanceRangeScalingFactor?: number;
    /**
     * Distance
     *
     * @generated from protobuf field: optional float distance_precision = 4;
     */
    distancePrecision?: number;
    /**
     * @generated from protobuf field: optional float distance_seperability = 5;
     */
    distanceSeperability?: number;
    /**
     * @generated from protobuf field: optional float distance_minimum_value = 6;
     */
    distanceMinimumValue?: number;
    /**
     * @generated from protobuf field: optional float distance_maximum_value = 7;
     */
    distanceMaximumValue?: number;
    /**
     * Velocity
     *
     * @generated from protobuf field: optional float velocity_precision = 8;
     */
    velocityPrecision?: number;
    /**
     * @generated from protobuf field: optional float velocity_seperability = 9;
     */
    velocitySeperability?: number;
    /**
     * @generated from protobuf field: optional float velocity_minimum_value = 10;
     */
    velocityMinimumValue?: number;
    /**
     * @generated from protobuf field: optional float velocity_maximum_value = 11;
     */
    velocityMaximumValue?: number;
    /**
     * @generated from protobuf field: optional float distance_velocity_covariance = 12;
     */
    distanceVelocityCovariance?: number;
}
/**
 * @generated from protobuf message ec.radar.Location
 */
export interface Location {
    /**
     * Radial distance [m]
     *
     * @generated from protobuf field: optional float radial_distance = 1;
     */
    radialDistance?: number;
    /**
     * Radial distance variance [m^2]
     *
     * @generated from protobuf field: optional float radial_distance_variance = 2;
     */
    radialDistanceVariance?: number;
    /**
     * Spectral spread in distance
     *
     * @generated from protobuf field: optional float radial_distance_spread = 3;
     */
    radialDistanceSpread?: number;
    /**
     * Relative radial velocity [m/s]
     *
     * @generated from protobuf field: optional float radial_velocity = 4;
     */
    radialVelocity?: number;
    /**
     * Variance of radial velocity [m^2/s^2]
     *
     * @generated from protobuf field: optional float radial_velocity_variance = 5;
     */
    radialVelocityVariance?: number;
    /**
     * Spectral spread in velocity
     *
     * @generated from protobuf field: optional float radial_velocity_spread = 6;
     */
    radialVelocitySpread?: number;
    /**
     * Covariance of radial distance and velocity [m^2/s]
     *
     * @generated from protobuf field: optional float radial_distance_velocity_covariance = 7;
     */
    radialDistanceVelocityCovariance?: number;
    /**
     * Quality of velocity resolution processing in [0,1]
     *
     * @generated from protobuf field: optional float radial_distance_velocity_quality = 8;
     */
    radialDistanceVelocityQuality?: number;
    /**
     * Orientation of spectral spread in distance and velocity
     *
     * @generated from protobuf field: optional float radial_distance_velocity_spread_orientation = 9;
     */
    radialDistanceVelocitySpreadOrientation?: number;
    /**
     * Elevation angle (phi) [rad]
     *
     * @generated from protobuf field: optional float elevation_angle = 10;
     */
    elevationAngle?: number;
    /**
     * Quality of elevation angle in [0,1]
     *
     * @generated from protobuf field: optional float elevation_angle_quality = 11;
     */
    elevationAngleQuality?: number;
    /**
     * Variance of elevation angles [rad^2]
     *
     * @generated from protobuf field: optional float elevation_angle_variance = 12;
     */
    elevationAngleVariance?: number;
    /**
     * Azimuth angle (theta) [rad]
     *
     * @generated from protobuf field: optional float azimuth_angle = 13;
     */
    azimuthAngle?: number;
    /**
     * Quality of azimuth angle in [0,1]
     *
     * @generated from protobuf field: optional float azimuth_angle_quality = 14;
     */
    azimuthAngleQuality?: number;
    /**
     * Variance of azimuth angles [rad^2]
     *
     * @generated from protobuf field: optional float azimuth_angle_variance = 15;
     */
    azimuthAngleVariance?: number;
    /**
     * Radar cross section [dBm2]
     *
     * @generated from protobuf field: optional float rcs = 16;
     */
    rcs?: number;
    /**
     * Received Signal Strength Indication (RSSI) [no unit]
     *
     * @generated from protobuf field: optional float rssi = 17;
     */
    rssi?: number;
    /**
     * Measurement status
     *
     * @generated from protobuf field: optional ec.radar.MeasurementStatus measurement_status = 18;
     */
    measurementStatus?: MeasurementStatus;
}
/**
 * @generated from protobuf enum ec.radar.ROADOBJECTTYPE
 */
export enum ROADOBJECTTYPE {
    /**
     * @generated from protobuf enum value: BST_TYPE_BICYCLE = 0;
     */
    BST_TYPE_BICYCLE = 0,
    /**
     * @generated from protobuf enum value: BST_TYPE_BUS = 1;
     */
    BST_TYPE_BUS = 1,
    /**
     * @generated from protobuf enum value: BST_TYPE_CAR = 2;
     */
    BST_TYPE_CAR = 2,
    /**
     * @generated from protobuf enum value: BST_TYPE_CARAVAN = 3;
     */
    BST_TYPE_CARAVAN = 3,
    /**
     * @generated from protobuf enum value: BST_TYPE_MOTORCYCLE = 4;
     */
    BST_TYPE_MOTORCYCLE = 4,
    /**
     * @generated from protobuf enum value: BST_TYPE_PEDESTRIAN = 5;
     */
    BST_TYPE_PEDESTRIAN = 5,
    /**
     * @generated from protobuf enum value: BST_TYPE_RIDER = 6;
     */
    BST_TYPE_RIDER = 6,
    /**
     * @generated from protobuf enum value: BST_TYPE_TRUCK = 7;
     */
    BST_TYPE_TRUCK = 7,
    /**
     * @generated from protobuf enum value: BST_TYPE_TRUCKTRAILER = 8;
     */
    BST_TYPE_TRUCKTRAILER = 8,
    /**
     * @generated from protobuf enum value: BST_TYPE_VAN = 9;
     */
    BST_TYPE_VAN = 9,
    /**
     * @generated from protobuf enum value: BST_TYPE_UNKNOWN = 10;
     */
    BST_TYPE_UNKNOWN = 10
}
/**
 * @generated from protobuf enum ec.radar.MeasurementState
 */
export enum MeasurementState {
    /**
     * @generated from protobuf enum value: MEASUREMENT_STATE_INVALID = 0;
     */
    INVALID = 0,
    /**
     * @generated from protobuf enum value: MEASUREMENT_STATE_VALID = 1;
     */
    VALID = 1
}
/**
 * @generated from protobuf enum ec.radar.OperationMode
 */
export enum OperationMode {
    /**
     * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
     */
    UNSPECIFIED$ = 0,
    /**
     * @generated from protobuf enum value: OPERATION_MODE_MEASUREMENT = 20;
     */
    MEASUREMENT = 20
}
/**
 * @generated from protobuf enum ec.radar.IndicatorStatus
 */
export enum IndicatorStatus {
    /**
     * Flags for indicator_status
     *
     * @generated from protobuf enum value: INDICATOR_STATUS_INVALID = 0;
     */
    INVALID = 0,
    /**
     * @generated from protobuf enum value: INDICATOR_STATUS_VALID_NO_INTERFERENCE = 1;
     */
    VALID_NO_INTERFERENCE = 1,
    /**
     * @generated from protobuf enum value: INDICATOR_STATUS_VALID_WITH_INTERFERENCE = 2;
     */
    VALID_WITH_INTERFERENCE = 2
}
/**
 * @generated from protobuf enum ec.radar.EstimationStatus
 */
export enum EstimationStatus {
    /**
     * Flags for estimation_status
     *
     * @generated from protobuf enum value: ESTIMATION_STATUS_VALID = 0;
     */
    VALID = 0
}
/**
 * @generated from protobuf enum ec.radar.MeasurementStatus
 */
export enum MeasurementStatus {
    /**
     * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
     */
    UNSPECIFIED$ = 0,
    /**
     * @generated from protobuf enum value: MEASUREMENT_STATUS_BITMASK_MEASURED = 1;
     */
    BITMASK_MEASURED = 1,
    /**
     * @generated from protobuf enum value: MEASUREMENT_STATUS_BITMASK_MULTI_TARGET_AZIMUTH = 2;
     */
    BITMASK_MULTI_TARGET_AZIMUTH = 2,
    /**
     * @generated from protobuf enum value: MEASUREMENT_STATUS_BITMASK_MULTI_TARGET_ELEVATION = 4;
     */
    BITMASK_MULTI_TARGET_ELEVATION = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class RadarCanfd$Type extends MessageType<RadarCanfd> {
    constructor() {
        super("ec.radar.RadarCanfd", [
            { no: 1, name: "header", kind: "message", T: () => Header },
            { no: 2, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "length", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "data", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<RadarCanfd>): RadarCanfd {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RadarCanfd>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RadarCanfd): RadarCanfd {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional ec.radar.Header header */ 1:
                    message.header = Header.internalBinaryRead(reader, reader.uint32(), options, message.header);
                    break;
                case /* optional uint32 id */ 2:
                    message.id = reader.uint32();
                    break;
                case /* optional uint32 length */ 3:
                    message.length = reader.uint32();
                    break;
                case /* optional bytes data */ 4:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RadarCanfd, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional ec.radar.Header header = 1; */
        if (message.header)
            Header.internalBinaryWrite(message.header, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 id = 2; */
        if (message.id !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.id);
        /* optional uint32 length = 3; */
        if (message.length !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.length);
        /* optional bytes data = 4; */
        if (message.data !== undefined)
            writer.tag(4, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ec.radar.RadarCanfd
 */
export const RadarCanfd = new RadarCanfd$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Header$Type extends MessageType<Header> {
    constructor() {
        super("ec.radar.Header", [
            { no: 1, name: "seq", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "timestamp", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "frame_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Header>): Header {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Header>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Header): Header {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 seq */ 1:
                    message.seq = reader.uint32();
                    break;
                case /* optional uint64 timestamp */ 2:
                    message.timestamp = reader.uint64().toBigInt();
                    break;
                case /* optional string frame_id */ 3:
                    message.frameId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Header, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 seq = 1; */
        if (message.seq !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.seq);
        /* optional uint64 timestamp = 2; */
        if (message.timestamp !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.timestamp);
        /* optional string frame_id = 3; */
        if (message.frameId !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.frameId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ec.radar.Header
 */
export const Header = new Header$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CLASSIFICATION$Type extends MessageType<CLASSIFICATION> {
    constructor() {
        super("ec.radar.CLASSIFICATION", [
            { no: 1, name: "obj_class", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "confidence_class", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<CLASSIFICATION>): CLASSIFICATION {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CLASSIFICATION>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CLASSIFICATION): CLASSIFICATION {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string obj_class */ 1:
                    message.objClass = reader.string();
                    break;
                case /* optional float confidence_class */ 2:
                    message.confidenceClass = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CLASSIFICATION, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string obj_class = 1; */
        if (message.objClass !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.objClass);
        /* optional float confidence_class = 2; */
        if (message.confidenceClass !== undefined)
            writer.tag(2, WireType.Bit32).float(message.confidenceClass);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ec.radar.CLASSIFICATION
 */
export const CLASSIFICATION = new CLASSIFICATION$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BBOX$Type extends MessageType<BBOX> {
    constructor() {
        super("ec.radar.BBOX", [
            { no: 1, name: "x1", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "y1", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "x2", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "y2", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<BBOX>): BBOX {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BBOX>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BBOX): BBOX {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional float x1 */ 1:
                    message.x1 = reader.float();
                    break;
                case /* optional float y1 */ 2:
                    message.y1 = reader.float();
                    break;
                case /* optional float x2 */ 3:
                    message.x2 = reader.float();
                    break;
                case /* optional float y2 */ 4:
                    message.y2 = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BBOX, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional float x1 = 1; */
        if (message.x1 !== undefined)
            writer.tag(1, WireType.Bit32).float(message.x1);
        /* optional float y1 = 2; */
        if (message.y1 !== undefined)
            writer.tag(2, WireType.Bit32).float(message.y1);
        /* optional float x2 = 3; */
        if (message.x2 !== undefined)
            writer.tag(3, WireType.Bit32).float(message.x2);
        /* optional float y2 = 4; */
        if (message.y2 !== undefined)
            writer.tag(4, WireType.Bit32).float(message.y2);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ec.radar.BBOX
 */
export const BBOX = new BBOX$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Time$Type extends MessageType<Time> {
    constructor() {
        super("ec.radar.Time", [
            { no: 1, name: "sec", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "nsec", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Time>): Time {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Time>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Time): Time {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 sec */ 1:
                    message.sec = reader.int32();
                    break;
                case /* optional int32 nsec */ 2:
                    message.nsec = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Time, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 sec = 1; */
        if (message.sec !== undefined)
            writer.tag(1, WireType.Varint).int32(message.sec);
        /* optional int32 nsec = 2; */
        if (message.nsec !== undefined)
            writer.tag(2, WireType.Varint).int32(message.nsec);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ec.radar.Time
 */
export const Time = new Time$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BSTVECHILESTATUS$Type extends MessageType<BSTVECHILESTATUS> {
    constructor() {
        super("ec.radar.BSTVECHILESTATUS", [
            { no: 1, name: "bbox", kind: "message", T: () => BBOX },
            { no: 2, name: "bboxglobal", kind: "message", T: () => BBOX },
            { no: 3, name: "radar_id", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "radar_id_p", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "cd_id", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "cv_id_p", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 7, name: "confidence", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 8, name: "x_offset", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 9, name: "classification", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CLASSIFICATION },
            { no: 10, name: "width", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 11, name: "length", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 12, name: "height", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 13, name: "width_var", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 14, name: "length_var", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 15, name: "height_var", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 16, name: "position_cx", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 17, name: "position_cy", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 18, name: "yaw", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 19, name: "yaw_rate", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 20, name: "velocity_x", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 21, name: "velocity_y", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 22, name: "velocity_x_var", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 23, name: "velocity_y_var", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 24, name: "acceleration_x", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 25, name: "acceleration_y", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<BSTVECHILESTATUS>): BSTVECHILESTATUS {
        const message = { classification: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BSTVECHILESTATUS>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BSTVECHILESTATUS): BSTVECHILESTATUS {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional ec.radar.BBOX bbox */ 1:
                    message.bbox = BBOX.internalBinaryRead(reader, reader.uint32(), options, message.bbox);
                    break;
                case /* optional ec.radar.BBOX bboxglobal */ 2:
                    message.bboxglobal = BBOX.internalBinaryRead(reader, reader.uint32(), options, message.bboxglobal);
                    break;
                case /* optional int64 radar_id */ 3:
                    message.radarId = reader.int64().toBigInt();
                    break;
                case /* optional float radar_id_p */ 4:
                    message.radarIdP = reader.float();
                    break;
                case /* optional int64 cd_id */ 5:
                    message.cdId = reader.int64().toBigInt();
                    break;
                case /* optional float cv_id_p */ 6:
                    message.cvIdP = reader.float();
                    break;
                case /* optional float confidence */ 7:
                    message.confidence = reader.float();
                    break;
                case /* optional float x_offset */ 8:
                    message.xOffset = reader.float();
                    break;
                case /* repeated ec.radar.CLASSIFICATION classification */ 9:
                    message.classification.push(CLASSIFICATION.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional float width */ 10:
                    message.width = reader.float();
                    break;
                case /* optional float length */ 11:
                    message.length = reader.float();
                    break;
                case /* optional float height */ 12:
                    message.height = reader.float();
                    break;
                case /* optional float width_var */ 13:
                    message.widthVar = reader.float();
                    break;
                case /* optional float length_var */ 14:
                    message.lengthVar = reader.float();
                    break;
                case /* optional float height_var */ 15:
                    message.heightVar = reader.float();
                    break;
                case /* optional double position_cx */ 16:
                    message.positionCx = reader.double();
                    break;
                case /* optional double position_cy */ 17:
                    message.positionCy = reader.double();
                    break;
                case /* optional float yaw */ 18:
                    message.yaw = reader.float();
                    break;
                case /* optional float yaw_rate */ 19:
                    message.yawRate = reader.float();
                    break;
                case /* optional double velocity_x */ 20:
                    message.velocityX = reader.double();
                    break;
                case /* optional double velocity_y */ 21:
                    message.velocityY = reader.double();
                    break;
                case /* optional double velocity_x_var */ 22:
                    message.velocityXVar = reader.double();
                    break;
                case /* optional double velocity_y_var */ 23:
                    message.velocityYVar = reader.double();
                    break;
                case /* optional double acceleration_x */ 24:
                    message.accelerationX = reader.double();
                    break;
                case /* optional double acceleration_y */ 25:
                    message.accelerationY = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BSTVECHILESTATUS, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional ec.radar.BBOX bbox = 1; */
        if (message.bbox)
            BBOX.internalBinaryWrite(message.bbox, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional ec.radar.BBOX bboxglobal = 2; */
        if (message.bboxglobal)
            BBOX.internalBinaryWrite(message.bboxglobal, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional int64 radar_id = 3; */
        if (message.radarId !== undefined)
            writer.tag(3, WireType.Varint).int64(message.radarId);
        /* optional float radar_id_p = 4; */
        if (message.radarIdP !== undefined)
            writer.tag(4, WireType.Bit32).float(message.radarIdP);
        /* optional int64 cd_id = 5; */
        if (message.cdId !== undefined)
            writer.tag(5, WireType.Varint).int64(message.cdId);
        /* optional float cv_id_p = 6; */
        if (message.cvIdP !== undefined)
            writer.tag(6, WireType.Bit32).float(message.cvIdP);
        /* optional float confidence = 7; */
        if (message.confidence !== undefined)
            writer.tag(7, WireType.Bit32).float(message.confidence);
        /* optional float x_offset = 8; */
        if (message.xOffset !== undefined)
            writer.tag(8, WireType.Bit32).float(message.xOffset);
        /* repeated ec.radar.CLASSIFICATION classification = 9; */
        for (let i = 0; i < message.classification.length; i++)
            CLASSIFICATION.internalBinaryWrite(message.classification[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* optional float width = 10; */
        if (message.width !== undefined)
            writer.tag(10, WireType.Bit32).float(message.width);
        /* optional float length = 11; */
        if (message.length !== undefined)
            writer.tag(11, WireType.Bit32).float(message.length);
        /* optional float height = 12; */
        if (message.height !== undefined)
            writer.tag(12, WireType.Bit32).float(message.height);
        /* optional float width_var = 13; */
        if (message.widthVar !== undefined)
            writer.tag(13, WireType.Bit32).float(message.widthVar);
        /* optional float length_var = 14; */
        if (message.lengthVar !== undefined)
            writer.tag(14, WireType.Bit32).float(message.lengthVar);
        /* optional float height_var = 15; */
        if (message.heightVar !== undefined)
            writer.tag(15, WireType.Bit32).float(message.heightVar);
        /* optional double position_cx = 16; */
        if (message.positionCx !== undefined)
            writer.tag(16, WireType.Bit64).double(message.positionCx);
        /* optional double position_cy = 17; */
        if (message.positionCy !== undefined)
            writer.tag(17, WireType.Bit64).double(message.positionCy);
        /* optional float yaw = 18; */
        if (message.yaw !== undefined)
            writer.tag(18, WireType.Bit32).float(message.yaw);
        /* optional float yaw_rate = 19; */
        if (message.yawRate !== undefined)
            writer.tag(19, WireType.Bit32).float(message.yawRate);
        /* optional double velocity_x = 20; */
        if (message.velocityX !== undefined)
            writer.tag(20, WireType.Bit64).double(message.velocityX);
        /* optional double velocity_y = 21; */
        if (message.velocityY !== undefined)
            writer.tag(21, WireType.Bit64).double(message.velocityY);
        /* optional double velocity_x_var = 22; */
        if (message.velocityXVar !== undefined)
            writer.tag(22, WireType.Bit64).double(message.velocityXVar);
        /* optional double velocity_y_var = 23; */
        if (message.velocityYVar !== undefined)
            writer.tag(23, WireType.Bit64).double(message.velocityYVar);
        /* optional double acceleration_x = 24; */
        if (message.accelerationX !== undefined)
            writer.tag(24, WireType.Bit64).double(message.accelerationX);
        /* optional double acceleration_y = 25; */
        if (message.accelerationY !== undefined)
            writer.tag(25, WireType.Bit64).double(message.accelerationY);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ec.radar.BSTVECHILESTATUS
 */
export const BSTVECHILESTATUS = new BSTVECHILESTATUS$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ROADCVOBJECT$Type extends MessageType<ROADCVOBJECT> {
    constructor() {
        super("ec.radar.ROADCVOBJECT", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "time_stamp", kind: "message", T: () => Time },
            { no: 3, name: "status", kind: "message", T: () => BSTVECHILESTATUS }
        ]);
    }
    create(value?: PartialMessage<ROADCVOBJECT>): ROADCVOBJECT {
        const message = { id: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ROADCVOBJECT>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ROADCVOBJECT): ROADCVOBJECT {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* ec.radar.Time time_stamp */ 2:
                    message.timeStamp = Time.internalBinaryRead(reader, reader.uint32(), options, message.timeStamp);
                    break;
                case /* ec.radar.BSTVECHILESTATUS status */ 3:
                    message.status = BSTVECHILESTATUS.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ROADCVOBJECT, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* ec.radar.Time time_stamp = 2; */
        if (message.timeStamp)
            Time.internalBinaryWrite(message.timeStamp, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* ec.radar.BSTVECHILESTATUS status = 3; */
        if (message.status)
            BSTVECHILESTATUS.internalBinaryWrite(message.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ec.radar.ROADCVOBJECT
 */
export const ROADCVOBJECT = new ROADCVOBJECT$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ROADCV_OBJECT_LIST$Type extends MessageType<ROADCV_OBJECT_LIST> {
    constructor() {
        super("ec.radar.ROADCV_OBJECT_LIST", [
            { no: 1, name: "header", kind: "message", T: () => Header },
            { no: 2, name: "objectnum", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "objectlist", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ROADCVOBJECT }
        ]);
    }
    create(value?: PartialMessage<ROADCV_OBJECT_LIST>): ROADCV_OBJECT_LIST {
        const message = { objectnum: 0, objectlist: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ROADCV_OBJECT_LIST>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ROADCV_OBJECT_LIST): ROADCV_OBJECT_LIST {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional ec.radar.Header header */ 1:
                    message.header = Header.internalBinaryRead(reader, reader.uint32(), options, message.header);
                    break;
                case /* int32 objectnum */ 2:
                    message.objectnum = reader.int32();
                    break;
                case /* repeated ec.radar.ROADCVOBJECT objectlist */ 3:
                    message.objectlist.push(ROADCVOBJECT.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ROADCV_OBJECT_LIST, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional ec.radar.Header header = 1; */
        if (message.header)
            Header.internalBinaryWrite(message.header, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 objectnum = 2; */
        if (message.objectnum !== 0)
            writer.tag(2, WireType.Varint).int32(message.objectnum);
        /* repeated ec.radar.ROADCVOBJECT objectlist = 3; */
        for (let i = 0; i < message.objectlist.length; i++)
            ROADCVOBJECT.internalBinaryWrite(message.objectlist[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ec.radar.ROADCV_OBJECT_LIST
 */
export const ROADCV_OBJECT_LIST = new ROADCV_OBJECT_LIST$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LocationInterface$Type extends MessageType<LocationInterface> {
    constructor() {
        super("ec.radar.LocationInterface", [
            { no: 1, name: "header", kind: "message", T: () => Header },
            { no: 2, name: "radar_ecu_timestamp", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "raw_locations", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Location },
            { no: 4, name: "sensing_state", kind: "message", T: () => SensingState }
        ]);
    }
    create(value?: PartialMessage<LocationInterface>): LocationInterface {
        const message = { rawLocations: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LocationInterface>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LocationInterface): LocationInterface {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional ec.radar.Header header */ 1:
                    message.header = Header.internalBinaryRead(reader, reader.uint32(), options, message.header);
                    break;
                case /* optional float radar_ecu_timestamp */ 2:
                    message.radarEcuTimestamp = reader.float();
                    break;
                case /* repeated ec.radar.Location raw_locations */ 3:
                    message.rawLocations.push(Location.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional ec.radar.SensingState sensing_state */ 4:
                    message.sensingState = SensingState.internalBinaryRead(reader, reader.uint32(), options, message.sensingState);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LocationInterface, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional ec.radar.Header header = 1; */
        if (message.header)
            Header.internalBinaryWrite(message.header, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional float radar_ecu_timestamp = 2; */
        if (message.radarEcuTimestamp !== undefined)
            writer.tag(2, WireType.Bit32).float(message.radarEcuTimestamp);
        /* repeated ec.radar.Location raw_locations = 3; */
        for (let i = 0; i < message.rawLocations.length; i++)
            Location.internalBinaryWrite(message.rawLocations[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional ec.radar.SensingState sensing_state = 4; */
        if (message.sensingState)
            SensingState.internalBinaryWrite(message.sensingState, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ec.radar.LocationInterface
 */
export const LocationInterface = new LocationInterface$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Blindness$Type extends MessageType<Blindness> {
    constructor() {
        super("ec.radar.Blindness", [
            { no: 1, name: "num_bins_detection_threshold", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "num_bins_detection_thresold_valid", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "two_target_rate_indicator", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "two_target_rate_indicator_valid", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "rcs_moving_object_model_deviation_indicator", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "rcs_moving_object_model_deviation_indicator_valid", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "azimuth_moving_object_model_deviation", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "azimuth_moving_object_model_deviation_valid", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "azimuth_static_object_model_deviation", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "azimuth_static_object_model_deviation_valid", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Blindness>): Blindness {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Blindness>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Blindness): Blindness {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 num_bins_detection_threshold */ 1:
                    message.numBinsDetectionThreshold = reader.uint32();
                    break;
                case /* optional bool num_bins_detection_thresold_valid */ 2:
                    message.numBinsDetectionThresoldValid = reader.bool();
                    break;
                case /* optional uint32 two_target_rate_indicator */ 3:
                    message.twoTargetRateIndicator = reader.uint32();
                    break;
                case /* optional bool two_target_rate_indicator_valid */ 4:
                    message.twoTargetRateIndicatorValid = reader.bool();
                    break;
                case /* optional uint32 rcs_moving_object_model_deviation_indicator */ 5:
                    message.rcsMovingObjectModelDeviationIndicator = reader.uint32();
                    break;
                case /* optional bool rcs_moving_object_model_deviation_indicator_valid */ 6:
                    message.rcsMovingObjectModelDeviationIndicatorValid = reader.bool();
                    break;
                case /* optional uint32 azimuth_moving_object_model_deviation */ 7:
                    message.azimuthMovingObjectModelDeviation = reader.uint32();
                    break;
                case /* optional bool azimuth_moving_object_model_deviation_valid */ 8:
                    message.azimuthMovingObjectModelDeviationValid = reader.bool();
                    break;
                case /* optional uint32 azimuth_static_object_model_deviation */ 9:
                    message.azimuthStaticObjectModelDeviation = reader.uint32();
                    break;
                case /* optional bool azimuth_static_object_model_deviation_valid */ 10:
                    message.azimuthStaticObjectModelDeviationValid = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Blindness, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 num_bins_detection_threshold = 1; */
        if (message.numBinsDetectionThreshold !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.numBinsDetectionThreshold);
        /* optional bool num_bins_detection_thresold_valid = 2; */
        if (message.numBinsDetectionThresoldValid !== undefined)
            writer.tag(2, WireType.Varint).bool(message.numBinsDetectionThresoldValid);
        /* optional uint32 two_target_rate_indicator = 3; */
        if (message.twoTargetRateIndicator !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.twoTargetRateIndicator);
        /* optional bool two_target_rate_indicator_valid = 4; */
        if (message.twoTargetRateIndicatorValid !== undefined)
            writer.tag(4, WireType.Varint).bool(message.twoTargetRateIndicatorValid);
        /* optional uint32 rcs_moving_object_model_deviation_indicator = 5; */
        if (message.rcsMovingObjectModelDeviationIndicator !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.rcsMovingObjectModelDeviationIndicator);
        /* optional bool rcs_moving_object_model_deviation_indicator_valid = 6; */
        if (message.rcsMovingObjectModelDeviationIndicatorValid !== undefined)
            writer.tag(6, WireType.Varint).bool(message.rcsMovingObjectModelDeviationIndicatorValid);
        /* optional uint32 azimuth_moving_object_model_deviation = 7; */
        if (message.azimuthMovingObjectModelDeviation !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.azimuthMovingObjectModelDeviation);
        /* optional bool azimuth_moving_object_model_deviation_valid = 8; */
        if (message.azimuthMovingObjectModelDeviationValid !== undefined)
            writer.tag(8, WireType.Varint).bool(message.azimuthMovingObjectModelDeviationValid);
        /* optional uint32 azimuth_static_object_model_deviation = 9; */
        if (message.azimuthStaticObjectModelDeviation !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.azimuthStaticObjectModelDeviation);
        /* optional bool azimuth_static_object_model_deviation_valid = 10; */
        if (message.azimuthStaticObjectModelDeviationValid !== undefined)
            writer.tag(10, WireType.Varint).bool(message.azimuthStaticObjectModelDeviationValid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ec.radar.Blindness
 */
export const Blindness = new Blindness$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldOfView$Type extends MessageType<FieldOfView> {
    constructor() {
        super("ec.radar.FieldOfView", [
            { no: 1, name: "maximum_fov_range_azimuth", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "fov_azimuth_angles", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "range_scaling_elevation", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "fov_elevation_angles", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<FieldOfView>): FieldOfView {
        const message = { maximumFovRangeAzimuth: [], fovAzimuthAngles: [], rangeScalingElevation: [], fovElevationAngles: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FieldOfView>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldOfView): FieldOfView {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated float maximum_fov_range_azimuth */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.maximumFovRangeAzimuth.push(reader.float());
                    else
                        message.maximumFovRangeAzimuth.push(reader.float());
                    break;
                case /* repeated float fov_azimuth_angles */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.fovAzimuthAngles.push(reader.float());
                    else
                        message.fovAzimuthAngles.push(reader.float());
                    break;
                case /* repeated float range_scaling_elevation */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.rangeScalingElevation.push(reader.float());
                    else
                        message.rangeScalingElevation.push(reader.float());
                    break;
                case /* repeated float fov_elevation_angles */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.fovElevationAngles.push(reader.float());
                    else
                        message.fovElevationAngles.push(reader.float());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldOfView, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated float maximum_fov_range_azimuth = 1; */
        for (let i = 0; i < message.maximumFovRangeAzimuth.length; i++)
            writer.tag(1, WireType.Bit32).float(message.maximumFovRangeAzimuth[i]);
        /* repeated float fov_azimuth_angles = 2; */
        for (let i = 0; i < message.fovAzimuthAngles.length; i++)
            writer.tag(2, WireType.Bit32).float(message.fovAzimuthAngles[i]);
        /* repeated float range_scaling_elevation = 3; */
        for (let i = 0; i < message.rangeScalingElevation.length; i++)
            writer.tag(3, WireType.Bit32).float(message.rangeScalingElevation[i]);
        /* repeated float fov_elevation_angles = 4; */
        for (let i = 0; i < message.fovElevationAngles.length; i++)
            writer.tag(4, WireType.Bit32).float(message.fovElevationAngles[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ec.radar.FieldOfView
 */
export const FieldOfView = new FieldOfView$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InterferenceStatus$Type extends MessageType<InterferenceStatus> {
    constructor() {
        super("ec.radar.InterferenceStatus", [
            { no: 1, name: "indicator_status", kind: "enum", opt: true, T: () => ["ec.radar.IndicatorStatus", IndicatorStatus, "INDICATOR_STATUS_"] },
            { no: 2, name: "field_of_view_reduction", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<InterferenceStatus>): InterferenceStatus {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InterferenceStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InterferenceStatus): InterferenceStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional ec.radar.IndicatorStatus indicator_status */ 1:
                    message.indicatorStatus = reader.int32();
                    break;
                case /* optional float field_of_view_reduction */ 2:
                    message.fieldOfViewReduction = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InterferenceStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional ec.radar.IndicatorStatus indicator_status = 1; */
        if (message.indicatorStatus !== undefined)
            writer.tag(1, WireType.Varint).int32(message.indicatorStatus);
        /* optional float field_of_view_reduction = 2; */
        if (message.fieldOfViewReduction !== undefined)
            writer.tag(2, WireType.Bit32).float(message.fieldOfViewReduction);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ec.radar.InterferenceStatus
 */
export const InterferenceStatus = new InterferenceStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Misalignment$Type extends MessageType<Misalignment> {
    constructor() {
        super("ec.radar.Misalignment", [
            { no: 1, name: "estimation_status", kind: "enum", opt: true, T: () => ["ec.radar.EstimationStatus", EstimationStatus, "ESTIMATION_STATUS_"] },
            { no: 2, name: "azimuth_angle_misalignment", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "azimuth_angle_misalignment_variance", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "elevation_angle_misalignment", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "elevation_angle_misalignment_variance", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<Misalignment>): Misalignment {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Misalignment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Misalignment): Misalignment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional ec.radar.EstimationStatus estimation_status */ 1:
                    message.estimationStatus = reader.int32();
                    break;
                case /* optional float azimuth_angle_misalignment */ 2:
                    message.azimuthAngleMisalignment = reader.float();
                    break;
                case /* optional float azimuth_angle_misalignment_variance */ 3:
                    message.azimuthAngleMisalignmentVariance = reader.float();
                    break;
                case /* optional float elevation_angle_misalignment */ 4:
                    message.elevationAngleMisalignment = reader.float();
                    break;
                case /* optional float elevation_angle_misalignment_variance */ 5:
                    message.elevationAngleMisalignmentVariance = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Misalignment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional ec.radar.EstimationStatus estimation_status = 1; */
        if (message.estimationStatus !== undefined)
            writer.tag(1, WireType.Varint).int32(message.estimationStatus);
        /* optional float azimuth_angle_misalignment = 2; */
        if (message.azimuthAngleMisalignment !== undefined)
            writer.tag(2, WireType.Bit32).float(message.azimuthAngleMisalignment);
        /* optional float azimuth_angle_misalignment_variance = 3; */
        if (message.azimuthAngleMisalignmentVariance !== undefined)
            writer.tag(3, WireType.Bit32).float(message.azimuthAngleMisalignmentVariance);
        /* optional float elevation_angle_misalignment = 4; */
        if (message.elevationAngleMisalignment !== undefined)
            writer.tag(4, WireType.Bit32).float(message.elevationAngleMisalignment);
        /* optional float elevation_angle_misalignment_variance = 5; */
        if (message.elevationAngleMisalignmentVariance !== undefined)
            writer.tag(5, WireType.Bit32).float(message.elevationAngleMisalignmentVariance);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ec.radar.Misalignment
 */
export const Misalignment = new Misalignment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SensingState$Type extends MessageType<SensingState> {
    constructor() {
        super("ec.radar.SensingState", [
            { no: 1, name: "operation_mode", kind: "enum", opt: true, T: () => ["ec.radar.OperationMode", OperationMode, "OPERATION_MODE_"] },
            { no: 2, name: "measurement_state", kind: "enum", opt: true, T: () => ["ec.radar.MeasurementState", MeasurementState, "MEASUREMENT_STATE_"] },
            { no: 3, name: "thermal_degredation_factor", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "blindness", kind: "message", T: () => Blindness },
            { no: 5, name: "field_of_view", kind: "message", T: () => FieldOfView },
            { no: 6, name: "interference_status", kind: "message", T: () => InterferenceStatus },
            { no: 7, name: "misalignment", kind: "message", T: () => Misalignment },
            { no: 8, name: "modulation_performance", kind: "message", T: () => ModulationPerformance }
        ]);
    }
    create(value?: PartialMessage<SensingState>): SensingState {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SensingState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SensingState): SensingState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional ec.radar.OperationMode operation_mode */ 1:
                    message.operationMode = reader.int32();
                    break;
                case /* optional ec.radar.MeasurementState measurement_state */ 2:
                    message.measurementState = reader.int32();
                    break;
                case /* optional float thermal_degredation_factor */ 3:
                    message.thermalDegredationFactor = reader.float();
                    break;
                case /* optional ec.radar.Blindness blindness */ 4:
                    message.blindness = Blindness.internalBinaryRead(reader, reader.uint32(), options, message.blindness);
                    break;
                case /* optional ec.radar.FieldOfView field_of_view */ 5:
                    message.fieldOfView = FieldOfView.internalBinaryRead(reader, reader.uint32(), options, message.fieldOfView);
                    break;
                case /* optional ec.radar.InterferenceStatus interference_status */ 6:
                    message.interferenceStatus = InterferenceStatus.internalBinaryRead(reader, reader.uint32(), options, message.interferenceStatus);
                    break;
                case /* optional ec.radar.Misalignment misalignment */ 7:
                    message.misalignment = Misalignment.internalBinaryRead(reader, reader.uint32(), options, message.misalignment);
                    break;
                case /* optional ec.radar.ModulationPerformance modulation_performance */ 8:
                    message.modulationPerformance = ModulationPerformance.internalBinaryRead(reader, reader.uint32(), options, message.modulationPerformance);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SensingState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional ec.radar.OperationMode operation_mode = 1; */
        if (message.operationMode !== undefined)
            writer.tag(1, WireType.Varint).int32(message.operationMode);
        /* optional ec.radar.MeasurementState measurement_state = 2; */
        if (message.measurementState !== undefined)
            writer.tag(2, WireType.Varint).int32(message.measurementState);
        /* optional float thermal_degredation_factor = 3; */
        if (message.thermalDegredationFactor !== undefined)
            writer.tag(3, WireType.Bit32).float(message.thermalDegredationFactor);
        /* optional ec.radar.Blindness blindness = 4; */
        if (message.blindness)
            Blindness.internalBinaryWrite(message.blindness, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional ec.radar.FieldOfView field_of_view = 5; */
        if (message.fieldOfView)
            FieldOfView.internalBinaryWrite(message.fieldOfView, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional ec.radar.InterferenceStatus interference_status = 6; */
        if (message.interferenceStatus)
            InterferenceStatus.internalBinaryWrite(message.interferenceStatus, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional ec.radar.Misalignment misalignment = 7; */
        if (message.misalignment)
            Misalignment.internalBinaryWrite(message.misalignment, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional ec.radar.ModulationPerformance modulation_performance = 8; */
        if (message.modulationPerformance)
            ModulationPerformance.internalBinaryWrite(message.modulationPerformance, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ec.radar.SensingState
 */
export const SensingState = new SensingState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ModulationPerformance$Type extends MessageType<ModulationPerformance> {
    constructor() {
        super("ec.radar.ModulationPerformance", [
            { no: 1, name: "active_detection_measurement_program_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "active_modulation_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "fov_distance_range_scaling_factor", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "distance_precision", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "distance_seperability", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "distance_minimum_value", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 7, name: "distance_maximum_value", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 8, name: "velocity_precision", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 9, name: "velocity_seperability", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 10, name: "velocity_minimum_value", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 11, name: "velocity_maximum_value", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 12, name: "distance_velocity_covariance", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<ModulationPerformance>): ModulationPerformance {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ModulationPerformance>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ModulationPerformance): ModulationPerformance {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 active_detection_measurement_program_id */ 1:
                    message.activeDetectionMeasurementProgramId = reader.uint32();
                    break;
                case /* optional uint32 active_modulation_id */ 2:
                    message.activeModulationId = reader.uint32();
                    break;
                case /* optional float fov_distance_range_scaling_factor */ 3:
                    message.fovDistanceRangeScalingFactor = reader.float();
                    break;
                case /* optional float distance_precision */ 4:
                    message.distancePrecision = reader.float();
                    break;
                case /* optional float distance_seperability */ 5:
                    message.distanceSeperability = reader.float();
                    break;
                case /* optional float distance_minimum_value */ 6:
                    message.distanceMinimumValue = reader.float();
                    break;
                case /* optional float distance_maximum_value */ 7:
                    message.distanceMaximumValue = reader.float();
                    break;
                case /* optional float velocity_precision */ 8:
                    message.velocityPrecision = reader.float();
                    break;
                case /* optional float velocity_seperability */ 9:
                    message.velocitySeperability = reader.float();
                    break;
                case /* optional float velocity_minimum_value */ 10:
                    message.velocityMinimumValue = reader.float();
                    break;
                case /* optional float velocity_maximum_value */ 11:
                    message.velocityMaximumValue = reader.float();
                    break;
                case /* optional float distance_velocity_covariance */ 12:
                    message.distanceVelocityCovariance = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ModulationPerformance, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 active_detection_measurement_program_id = 1; */
        if (message.activeDetectionMeasurementProgramId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.activeDetectionMeasurementProgramId);
        /* optional uint32 active_modulation_id = 2; */
        if (message.activeModulationId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.activeModulationId);
        /* optional float fov_distance_range_scaling_factor = 3; */
        if (message.fovDistanceRangeScalingFactor !== undefined)
            writer.tag(3, WireType.Bit32).float(message.fovDistanceRangeScalingFactor);
        /* optional float distance_precision = 4; */
        if (message.distancePrecision !== undefined)
            writer.tag(4, WireType.Bit32).float(message.distancePrecision);
        /* optional float distance_seperability = 5; */
        if (message.distanceSeperability !== undefined)
            writer.tag(5, WireType.Bit32).float(message.distanceSeperability);
        /* optional float distance_minimum_value = 6; */
        if (message.distanceMinimumValue !== undefined)
            writer.tag(6, WireType.Bit32).float(message.distanceMinimumValue);
        /* optional float distance_maximum_value = 7; */
        if (message.distanceMaximumValue !== undefined)
            writer.tag(7, WireType.Bit32).float(message.distanceMaximumValue);
        /* optional float velocity_precision = 8; */
        if (message.velocityPrecision !== undefined)
            writer.tag(8, WireType.Bit32).float(message.velocityPrecision);
        /* optional float velocity_seperability = 9; */
        if (message.velocitySeperability !== undefined)
            writer.tag(9, WireType.Bit32).float(message.velocitySeperability);
        /* optional float velocity_minimum_value = 10; */
        if (message.velocityMinimumValue !== undefined)
            writer.tag(10, WireType.Bit32).float(message.velocityMinimumValue);
        /* optional float velocity_maximum_value = 11; */
        if (message.velocityMaximumValue !== undefined)
            writer.tag(11, WireType.Bit32).float(message.velocityMaximumValue);
        /* optional float distance_velocity_covariance = 12; */
        if (message.distanceVelocityCovariance !== undefined)
            writer.tag(12, WireType.Bit32).float(message.distanceVelocityCovariance);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ec.radar.ModulationPerformance
 */
export const ModulationPerformance = new ModulationPerformance$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Location$Type extends MessageType<Location> {
    constructor() {
        super("ec.radar.Location", [
            { no: 1, name: "radial_distance", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "radial_distance_variance", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "radial_distance_spread", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "radial_velocity", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "radial_velocity_variance", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "radial_velocity_spread", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 7, name: "radial_distance_velocity_covariance", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 8, name: "radial_distance_velocity_quality", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 9, name: "radial_distance_velocity_spread_orientation", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 10, name: "elevation_angle", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 11, name: "elevation_angle_quality", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 12, name: "elevation_angle_variance", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 13, name: "azimuth_angle", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 14, name: "azimuth_angle_quality", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 15, name: "azimuth_angle_variance", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 16, name: "rcs", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 17, name: "rssi", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 18, name: "measurement_status", kind: "enum", opt: true, T: () => ["ec.radar.MeasurementStatus", MeasurementStatus, "MEASUREMENT_STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<Location>): Location {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Location>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Location): Location {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional float radial_distance */ 1:
                    message.radialDistance = reader.float();
                    break;
                case /* optional float radial_distance_variance */ 2:
                    message.radialDistanceVariance = reader.float();
                    break;
                case /* optional float radial_distance_spread */ 3:
                    message.radialDistanceSpread = reader.float();
                    break;
                case /* optional float radial_velocity */ 4:
                    message.radialVelocity = reader.float();
                    break;
                case /* optional float radial_velocity_variance */ 5:
                    message.radialVelocityVariance = reader.float();
                    break;
                case /* optional float radial_velocity_spread */ 6:
                    message.radialVelocitySpread = reader.float();
                    break;
                case /* optional float radial_distance_velocity_covariance */ 7:
                    message.radialDistanceVelocityCovariance = reader.float();
                    break;
                case /* optional float radial_distance_velocity_quality */ 8:
                    message.radialDistanceVelocityQuality = reader.float();
                    break;
                case /* optional float radial_distance_velocity_spread_orientation */ 9:
                    message.radialDistanceVelocitySpreadOrientation = reader.float();
                    break;
                case /* optional float elevation_angle */ 10:
                    message.elevationAngle = reader.float();
                    break;
                case /* optional float elevation_angle_quality */ 11:
                    message.elevationAngleQuality = reader.float();
                    break;
                case /* optional float elevation_angle_variance */ 12:
                    message.elevationAngleVariance = reader.float();
                    break;
                case /* optional float azimuth_angle */ 13:
                    message.azimuthAngle = reader.float();
                    break;
                case /* optional float azimuth_angle_quality */ 14:
                    message.azimuthAngleQuality = reader.float();
                    break;
                case /* optional float azimuth_angle_variance */ 15:
                    message.azimuthAngleVariance = reader.float();
                    break;
                case /* optional float rcs */ 16:
                    message.rcs = reader.float();
                    break;
                case /* optional float rssi */ 17:
                    message.rssi = reader.float();
                    break;
                case /* optional ec.radar.MeasurementStatus measurement_status */ 18:
                    message.measurementStatus = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Location, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional float radial_distance = 1; */
        if (message.radialDistance !== undefined)
            writer.tag(1, WireType.Bit32).float(message.radialDistance);
        /* optional float radial_distance_variance = 2; */
        if (message.radialDistanceVariance !== undefined)
            writer.tag(2, WireType.Bit32).float(message.radialDistanceVariance);
        /* optional float radial_distance_spread = 3; */
        if (message.radialDistanceSpread !== undefined)
            writer.tag(3, WireType.Bit32).float(message.radialDistanceSpread);
        /* optional float radial_velocity = 4; */
        if (message.radialVelocity !== undefined)
            writer.tag(4, WireType.Bit32).float(message.radialVelocity);
        /* optional float radial_velocity_variance = 5; */
        if (message.radialVelocityVariance !== undefined)
            writer.tag(5, WireType.Bit32).float(message.radialVelocityVariance);
        /* optional float radial_velocity_spread = 6; */
        if (message.radialVelocitySpread !== undefined)
            writer.tag(6, WireType.Bit32).float(message.radialVelocitySpread);
        /* optional float radial_distance_velocity_covariance = 7; */
        if (message.radialDistanceVelocityCovariance !== undefined)
            writer.tag(7, WireType.Bit32).float(message.radialDistanceVelocityCovariance);
        /* optional float radial_distance_velocity_quality = 8; */
        if (message.radialDistanceVelocityQuality !== undefined)
            writer.tag(8, WireType.Bit32).float(message.radialDistanceVelocityQuality);
        /* optional float radial_distance_velocity_spread_orientation = 9; */
        if (message.radialDistanceVelocitySpreadOrientation !== undefined)
            writer.tag(9, WireType.Bit32).float(message.radialDistanceVelocitySpreadOrientation);
        /* optional float elevation_angle = 10; */
        if (message.elevationAngle !== undefined)
            writer.tag(10, WireType.Bit32).float(message.elevationAngle);
        /* optional float elevation_angle_quality = 11; */
        if (message.elevationAngleQuality !== undefined)
            writer.tag(11, WireType.Bit32).float(message.elevationAngleQuality);
        /* optional float elevation_angle_variance = 12; */
        if (message.elevationAngleVariance !== undefined)
            writer.tag(12, WireType.Bit32).float(message.elevationAngleVariance);
        /* optional float azimuth_angle = 13; */
        if (message.azimuthAngle !== undefined)
            writer.tag(13, WireType.Bit32).float(message.azimuthAngle);
        /* optional float azimuth_angle_quality = 14; */
        if (message.azimuthAngleQuality !== undefined)
            writer.tag(14, WireType.Bit32).float(message.azimuthAngleQuality);
        /* optional float azimuth_angle_variance = 15; */
        if (message.azimuthAngleVariance !== undefined)
            writer.tag(15, WireType.Bit32).float(message.azimuthAngleVariance);
        /* optional float rcs = 16; */
        if (message.rcs !== undefined)
            writer.tag(16, WireType.Bit32).float(message.rcs);
        /* optional float rssi = 17; */
        if (message.rssi !== undefined)
            writer.tag(17, WireType.Bit32).float(message.rssi);
        /* optional ec.radar.MeasurementStatus measurement_status = 18; */
        if (message.measurementStatus !== undefined)
            writer.tag(18, WireType.Varint).int32(message.measurementStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ec.radar.Location
 */
export const Location = new Location$Type();
