// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "CImg.proto" (package "ec.data", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ec.data.DataImg
 */
export interface DataImg {
    /**
     * @generated from protobuf field: uint64 timestamp = 1;
     */
    timestamp: bigint;
    /**
     * @generated from protobuf field: uint64 frameidx = 2;
     */
    frameidx: bigint;
    /**
     * @generated from protobuf field: uint32 cameraid = 3;
     */
    cameraid: number;
    /**
     * @generated from protobuf field: bytes addr = 4;
     */
    addr: Uint8Array;
    /**
     * @generated from protobuf field: uint32 length = 5;
     */
    length: number;
    /**
     * @generated from protobuf field: uint32 error = 6;
     */
    error: number;
}
/**
 * @generated from protobuf message ec.data.IonImg
 */
export interface IonImg {
    /**
     * @generated from protobuf field: optional uint64 timestamp = 1;
     */
    timestamp?: bigint;
    /**
     * @generated from protobuf field: optional uint64 frameidx = 2;
     */
    frameidx?: bigint;
    /**
     * @generated from protobuf field: optional uint32 cameraid = 3;
     */
    cameraid?: number;
    /**
     * @generated from protobuf field: optional uint64 addr_net = 4;
     */
    addrNet?: bigint;
    /**
     * @generated from protobuf field: optional uint64 addr_plate = 5;
     */
    addrPlate?: bigint;
    /**
     * @generated from protobuf field: optional uint32 net_size = 6;
     */
    netSize?: number;
    /**
     * @generated from protobuf field: optional uint32 plate_size = 7;
     */
    plateSize?: number;
    /**
     * @generated from protobuf field: optional int32 error = 8;
     */
    error?: number;
    /**
     * @generated from protobuf field: optional int32 type = 9;
     */
    type?: number;
    /**
     * @generated from protobuf field: optional uint32 phys_addr = 10;
     */
    physAddr?: number;
    /**
     * @generated from protobuf field: optional bool plate = 11;
     */
    plate?: boolean;
    /**
     * @generated from protobuf field: optional int32 ionidx = 12;
     */
    ionidx?: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class DataImg$Type extends MessageType<DataImg> {
    constructor() {
        super("ec.data.DataImg", [
            { no: 1, name: "timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "frameidx", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "cameraid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "addr", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 5, name: "length", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "error", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DataImg>): DataImg {
        const message = { timestamp: 0n, frameidx: 0n, cameraid: 0, addr: new Uint8Array(0), length: 0, error: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DataImg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DataImg): DataImg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 timestamp */ 1:
                    message.timestamp = reader.uint64().toBigInt();
                    break;
                case /* uint64 frameidx */ 2:
                    message.frameidx = reader.uint64().toBigInt();
                    break;
                case /* uint32 cameraid */ 3:
                    message.cameraid = reader.uint32();
                    break;
                case /* bytes addr */ 4:
                    message.addr = reader.bytes();
                    break;
                case /* uint32 length */ 5:
                    message.length = reader.uint32();
                    break;
                case /* uint32 error */ 6:
                    message.error = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DataImg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 timestamp = 1; */
        if (message.timestamp !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.timestamp);
        /* uint64 frameidx = 2; */
        if (message.frameidx !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.frameidx);
        /* uint32 cameraid = 3; */
        if (message.cameraid !== 0)
            writer.tag(3, WireType.Varint).uint32(message.cameraid);
        /* bytes addr = 4; */
        if (message.addr.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.addr);
        /* uint32 length = 5; */
        if (message.length !== 0)
            writer.tag(5, WireType.Varint).uint32(message.length);
        /* uint32 error = 6; */
        if (message.error !== 0)
            writer.tag(6, WireType.Varint).uint32(message.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ec.data.DataImg
 */
export const DataImg = new DataImg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IonImg$Type extends MessageType<IonImg> {
    constructor() {
        super("ec.data.IonImg", [
            { no: 1, name: "timestamp", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "frameidx", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "cameraid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "addr_net", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "addr_plate", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "net_size", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "plate_size", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "error", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "type", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "phys_addr", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "plate", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "ionidx", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<IonImg>): IonImg {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IonImg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IonImg): IonImg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 timestamp */ 1:
                    message.timestamp = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 frameidx */ 2:
                    message.frameidx = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 cameraid */ 3:
                    message.cameraid = reader.uint32();
                    break;
                case /* optional uint64 addr_net */ 4:
                    message.addrNet = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 addr_plate */ 5:
                    message.addrPlate = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 net_size */ 6:
                    message.netSize = reader.uint32();
                    break;
                case /* optional uint32 plate_size */ 7:
                    message.plateSize = reader.uint32();
                    break;
                case /* optional int32 error */ 8:
                    message.error = reader.int32();
                    break;
                case /* optional int32 type */ 9:
                    message.type = reader.int32();
                    break;
                case /* optional uint32 phys_addr */ 10:
                    message.physAddr = reader.uint32();
                    break;
                case /* optional bool plate */ 11:
                    message.plate = reader.bool();
                    break;
                case /* optional int32 ionidx */ 12:
                    message.ionidx = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IonImg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 timestamp = 1; */
        if (message.timestamp !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.timestamp);
        /* optional uint64 frameidx = 2; */
        if (message.frameidx !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.frameidx);
        /* optional uint32 cameraid = 3; */
        if (message.cameraid !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.cameraid);
        /* optional uint64 addr_net = 4; */
        if (message.addrNet !== undefined)
            writer.tag(4, WireType.Varint).uint64(message.addrNet);
        /* optional uint64 addr_plate = 5; */
        if (message.addrPlate !== undefined)
            writer.tag(5, WireType.Varint).uint64(message.addrPlate);
        /* optional uint32 net_size = 6; */
        if (message.netSize !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.netSize);
        /* optional uint32 plate_size = 7; */
        if (message.plateSize !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.plateSize);
        /* optional int32 error = 8; */
        if (message.error !== undefined)
            writer.tag(8, WireType.Varint).int32(message.error);
        /* optional int32 type = 9; */
        if (message.type !== undefined)
            writer.tag(9, WireType.Varint).int32(message.type);
        /* optional uint32 phys_addr = 10; */
        if (message.physAddr !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.physAddr);
        /* optional bool plate = 11; */
        if (message.plate !== undefined)
            writer.tag(11, WireType.Varint).bool(message.plate);
        /* optional int32 ionidx = 12; */
        if (message.ionidx !== undefined)
            writer.tag(12, WireType.Varint).int32(message.ionidx);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ec.data.IonImg
 */
export const IonImg = new IonImg$Type();
