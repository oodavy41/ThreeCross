// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "ads_radar.proto" (package "autoplt", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message autoplt.RadarData
 */
export interface RadarData {
    /**
     * @generated from protobuf field: optional bool bNewObject = 1;
     */
    bNewObject?: boolean;
    /**
     * @generated from protobuf field: optional bool bStaticObject = 2;
     */
    bStaticObject?: boolean;
    /**
     * @generated from protobuf field: optional bool bValidFlag = 3;
     */
    bValidFlag?: boolean;
    /**
     * @generated from protobuf field: optional uint64 u64ObjectID = 4;
     */
    u64ObjectID?: bigint;
    /**
     * @generated from protobuf field: optional uint32 u8Count = 5;
     */
    u8Count?: number;
    /**
     * @generated from protobuf field: optional uint32 u32CurveRadius = 6;
     */
    u32CurveRadius?: number;
    /**
     * @generated from protobuf field: optional uint32 u32ReturnSpeed = 7;
     */
    u32ReturnSpeed?: number;
    /**
     * @generated from protobuf field: optional float fDistance = 8;
     */
    fDistance?: number;
    /**
     * @generated from protobuf field: optional float fSpeed = 9;
     */
    fSpeed?: number;
    /**
     * @generated from protobuf field: optional float fAngle = 10;
     */
    fAngle?: number;
    /**
     * @generated from protobuf field: optional float fXPos = 11;
     */
    fXPos?: number;
    /**
     * @generated from protobuf field: optional float fYPos = 12;
     */
    fYPos?: number;
    /**
     * @generated from protobuf field: optional float fXVel = 13;
     */
    fXVel?: number;
    /**
     * @generated from protobuf field: optional float fYVel = 14;
     */
    fYVel?: number;
    /**
     * @generated from protobuf field: optional uint64 u64TimeStamp = 15;
     */
    u64TimeStamp?: bigint;
    /**
     * @generated from protobuf field: optional uint32 u32RadarID = 16;
     */
    u32RadarID?: number;
    /**
     * @generated from protobuf field: optional autoplt.RadarData.SensorError radarError = 17;
     */
    radarError?: RadarData_SensorError;
    /**
     * @generated from protobuf field: optional autoplt.RadarObjecType objType = 18;
     */
    objType?: RadarObjecType;
    /**
     * @generated from protobuf field: optional uint32 u32Confidence = 19;
     */
    u32Confidence?: number;
}
/**
 * @generated from protobuf enum autoplt.RadarData.SensorError
 */
export enum RadarData_SensorError {
    /**
     * SUCCESS
     *
     * @generated from protobuf enum value: SENSOR_SUCCESS = 0;
     */
    SENSOR_SUCCESS = 0,
    /**
     * NODATA
     *
     * @generated from protobuf enum value: SENSOR_FAILED_NODATA = 1;
     */
    SENSOR_FAILED_NODATA = 1,
    /**
     * FAILED_SIGNAL_WEAK
     *
     * @generated from protobuf enum value: SENSOR_FAILED_SIGNAL_WEAK = 2;
     */
    SENSOR_FAILED_SIGNAL_WEAK = 2
}
/**
 * @generated from protobuf message autoplt.RadarFrame
 */
export interface RadarFrame {
    /**
     * @generated from protobuf field: repeated autoplt.RadarData frame = 1;
     */
    frame: RadarData[];
    /**
     * @generated from protobuf field: optional uint64 timestamp = 2;
     */
    timestamp?: bigint;
    /**
     * @generated from protobuf field: optional uint32 object_number = 3;
     */
    objectNumber?: number;
    /**
     * @generated from protobuf field: optional uint64 sensor_id = 4;
     */
    sensorId?: bigint;
    /**
     * @generated from protobuf field: optional uint32 object_size = 5;
     */
    objectSize?: number;
    /**
     * @generated from protobuf field: optional bool frame_valid = 6;
     */
    frameValid?: boolean; // todo event
}
/**
 * @generated from protobuf enum autoplt.RadarObjecType
 */
export enum RadarObjecType {
    /**
     * @generated from protobuf enum value: Unknown = 0;
     */
    Unknown = 0,
    /**
     * @generated from protobuf enum value: Pedestrain = 1;
     */
    Pedestrain = 1,
    /**
     * @generated from protobuf enum value: Bicycle = 2;
     */
    Bicycle = 2,
    /**
     * @generated from protobuf enum value: LightVehicle = 3;
     */
    LightVehicle = 3,
    /**
     * @generated from protobuf enum value: MediumVehicle = 4;
     */
    MediumVehicle = 4,
    /**
     * @generated from protobuf enum value: OversizeVehicle = 5;
     */
    OversizeVehicle = 5
}
// @generated message type with reflection information, may provide speed optimized methods
class RadarData$Type extends MessageType<RadarData> {
    constructor() {
        super("autoplt.RadarData", [
            { no: 1, name: "bNewObject", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "bStaticObject", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "bValidFlag", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "u64ObjectID", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "u8Count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "u32CurveRadius", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "u32ReturnSpeed", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "fDistance", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 9, name: "fSpeed", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 10, name: "fAngle", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 11, name: "fXPos", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 12, name: "fYPos", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 13, name: "fXVel", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 14, name: "fYVel", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 15, name: "u64TimeStamp", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 16, name: "u32RadarID", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 17, name: "radarError", kind: "enum", opt: true, T: () => ["autoplt.RadarData.SensorError", RadarData_SensorError] },
            { no: 18, name: "objType", kind: "enum", opt: true, T: () => ["autoplt.RadarObjecType", RadarObjecType] },
            { no: 19, name: "u32Confidence", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RadarData>): RadarData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RadarData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RadarData): RadarData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool bNewObject */ 1:
                    message.bNewObject = reader.bool();
                    break;
                case /* optional bool bStaticObject */ 2:
                    message.bStaticObject = reader.bool();
                    break;
                case /* optional bool bValidFlag */ 3:
                    message.bValidFlag = reader.bool();
                    break;
                case /* optional uint64 u64ObjectID */ 4:
                    message.u64ObjectID = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 u8Count */ 5:
                    message.u8Count = reader.uint32();
                    break;
                case /* optional uint32 u32CurveRadius */ 6:
                    message.u32CurveRadius = reader.uint32();
                    break;
                case /* optional uint32 u32ReturnSpeed */ 7:
                    message.u32ReturnSpeed = reader.uint32();
                    break;
                case /* optional float fDistance */ 8:
                    message.fDistance = reader.float();
                    break;
                case /* optional float fSpeed */ 9:
                    message.fSpeed = reader.float();
                    break;
                case /* optional float fAngle */ 10:
                    message.fAngle = reader.float();
                    break;
                case /* optional float fXPos */ 11:
                    message.fXPos = reader.float();
                    break;
                case /* optional float fYPos */ 12:
                    message.fYPos = reader.float();
                    break;
                case /* optional float fXVel */ 13:
                    message.fXVel = reader.float();
                    break;
                case /* optional float fYVel */ 14:
                    message.fYVel = reader.float();
                    break;
                case /* optional uint64 u64TimeStamp */ 15:
                    message.u64TimeStamp = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 u32RadarID */ 16:
                    message.u32RadarID = reader.uint32();
                    break;
                case /* optional autoplt.RadarData.SensorError radarError */ 17:
                    message.radarError = reader.int32();
                    break;
                case /* optional autoplt.RadarObjecType objType */ 18:
                    message.objType = reader.int32();
                    break;
                case /* optional uint32 u32Confidence */ 19:
                    message.u32Confidence = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RadarData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool bNewObject = 1; */
        if (message.bNewObject !== undefined)
            writer.tag(1, WireType.Varint).bool(message.bNewObject);
        /* optional bool bStaticObject = 2; */
        if (message.bStaticObject !== undefined)
            writer.tag(2, WireType.Varint).bool(message.bStaticObject);
        /* optional bool bValidFlag = 3; */
        if (message.bValidFlag !== undefined)
            writer.tag(3, WireType.Varint).bool(message.bValidFlag);
        /* optional uint64 u64ObjectID = 4; */
        if (message.u64ObjectID !== undefined)
            writer.tag(4, WireType.Varint).uint64(message.u64ObjectID);
        /* optional uint32 u8Count = 5; */
        if (message.u8Count !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.u8Count);
        /* optional uint32 u32CurveRadius = 6; */
        if (message.u32CurveRadius !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.u32CurveRadius);
        /* optional uint32 u32ReturnSpeed = 7; */
        if (message.u32ReturnSpeed !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.u32ReturnSpeed);
        /* optional float fDistance = 8; */
        if (message.fDistance !== undefined)
            writer.tag(8, WireType.Bit32).float(message.fDistance);
        /* optional float fSpeed = 9; */
        if (message.fSpeed !== undefined)
            writer.tag(9, WireType.Bit32).float(message.fSpeed);
        /* optional float fAngle = 10; */
        if (message.fAngle !== undefined)
            writer.tag(10, WireType.Bit32).float(message.fAngle);
        /* optional float fXPos = 11; */
        if (message.fXPos !== undefined)
            writer.tag(11, WireType.Bit32).float(message.fXPos);
        /* optional float fYPos = 12; */
        if (message.fYPos !== undefined)
            writer.tag(12, WireType.Bit32).float(message.fYPos);
        /* optional float fXVel = 13; */
        if (message.fXVel !== undefined)
            writer.tag(13, WireType.Bit32).float(message.fXVel);
        /* optional float fYVel = 14; */
        if (message.fYVel !== undefined)
            writer.tag(14, WireType.Bit32).float(message.fYVel);
        /* optional uint64 u64TimeStamp = 15; */
        if (message.u64TimeStamp !== undefined)
            writer.tag(15, WireType.Varint).uint64(message.u64TimeStamp);
        /* optional uint32 u32RadarID = 16; */
        if (message.u32RadarID !== undefined)
            writer.tag(16, WireType.Varint).uint32(message.u32RadarID);
        /* optional autoplt.RadarData.SensorError radarError = 17; */
        if (message.radarError !== undefined)
            writer.tag(17, WireType.Varint).int32(message.radarError);
        /* optional autoplt.RadarObjecType objType = 18; */
        if (message.objType !== undefined)
            writer.tag(18, WireType.Varint).int32(message.objType);
        /* optional uint32 u32Confidence = 19; */
        if (message.u32Confidence !== undefined)
            writer.tag(19, WireType.Varint).uint32(message.u32Confidence);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message autoplt.RadarData
 */
export const RadarData = new RadarData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RadarFrame$Type extends MessageType<RadarFrame> {
    constructor() {
        super("autoplt.RadarFrame", [
            { no: 1, name: "frame", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RadarData },
            { no: 2, name: "timestamp", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "object_number", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "sensor_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "object_size", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "frame_valid", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RadarFrame>): RadarFrame {
        const message = { frame: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RadarFrame>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RadarFrame): RadarFrame {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated autoplt.RadarData frame */ 1:
                    message.frame.push(RadarData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint64 timestamp */ 2:
                    message.timestamp = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 object_number */ 3:
                    message.objectNumber = reader.uint32();
                    break;
                case /* optional uint64 sensor_id */ 4:
                    message.sensorId = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 object_size */ 5:
                    message.objectSize = reader.uint32();
                    break;
                case /* optional bool frame_valid */ 6:
                    message.frameValid = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RadarFrame, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated autoplt.RadarData frame = 1; */
        for (let i = 0; i < message.frame.length; i++)
            RadarData.internalBinaryWrite(message.frame[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional uint64 timestamp = 2; */
        if (message.timestamp !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.timestamp);
        /* optional uint32 object_number = 3; */
        if (message.objectNumber !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.objectNumber);
        /* optional uint64 sensor_id = 4; */
        if (message.sensorId !== undefined)
            writer.tag(4, WireType.Varint).uint64(message.sensorId);
        /* optional uint32 object_size = 5; */
        if (message.objectSize !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.objectSize);
        /* optional bool frame_valid = 6; */
        if (message.frameValid !== undefined)
            writer.tag(6, WireType.Varint).bool(message.frameValid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message autoplt.RadarFrame
 */
export const RadarFrame = new RadarFrame$Type();
