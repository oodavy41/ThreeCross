// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "event_config.proto" (package "ec.event_config", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ec.event_config.EventConfig
 */
export interface EventConfig {
    /**
     * @generated from protobuf field: optional uint32 group_id = 1;
     */
    groupId?: number;
    /**
     * @generated from protobuf field: optional bool need_save_result = 2;
     */
    needSaveResult?: boolean;
    /**
     * @generated from protobuf field: optional bool use_wgs = 3;
     */
    useWgs?: boolean;
    /**
     * @generated from protobuf field: optional int32 net_width = 10;
     */
    netWidth?: number;
    /**
     * @generated from protobuf field: optional int32 net_height = 11;
     */
    netHeight?: number;
    /**
     * @generated from protobuf field: optional string main_camera_calib = 12;
     */
    mainCameraCalib?: string;
    /**
     * @generated from protobuf field: optional string tele2wide_calib = 13 [json_name = "tele2wideCalib"];
     */
    tele2WideCalib?: string;
    /**
     * @generated from protobuf field: optional string camera_ip_file = 14;
     */
    cameraIpFile?: string;
    /**
     * @generated from protobuf field: optional string wide_lane_calib_file = 17;
     */
    wideLaneCalibFile?: string;
    /**
     * @generated from protobuf field: optional string tele_lane_calib_file = 18;
     */
    teleLaneCalibFile?: string;
    /**
     * @generated from protobuf field: optional string rtk_config_file = 19;
     */
    rtkConfigFile?: string;
    /**
     * @generated from protobuf field: optional string camera_config_file = 20;
     */
    cameraConfigFile?: string;
    /**
     * @generated from protobuf field: optional ec.event_config.EventConfig.LogLevel loglevel = 22;
     */
    loglevel?: EventConfig_LogLevel;
    /**
     * @generated from protobuf field: optional string logpath = 23;
     */
    logpath?: string;
    /**
     * @generated from protobuf field: optional string app_name = 24;
     */
    appName?: string;
    /**
     * @generated from protobuf field: optional float overspeed_vel_threshold = 30;
     */
    overspeedVelThreshold?: number; // 单位km/h
    /**
     * @generated from protobuf field: optional float overspeed_time_threshold = 31;
     */
    overspeedTimeThreshold?: number; // 单位s
    /**
     * @generated from protobuf field: optional float underspeed_vel_threshold = 32;
     */
    underspeedVelThreshold?: number;
    /**
     * @generated from protobuf field: optional float underspeed_time_threshold = 33;
     */
    underspeedTimeThreshold?: number;
    /**
     * @generated from protobuf field: optional float parking_vel_threshold = 34;
     */
    parkingVelThreshold?: number;
    /**
     * @generated from protobuf field: optional float parking_time_threshold = 35;
     */
    parkingTimeThreshold?: number;
    /**
     * @generated from protobuf field: optional float emergency_time_threshold = 36;
     */
    emergencyTimeThreshold?: number;
    /**
     * @generated from protobuf field: optional float small_lane_time_threshold = 37;
     */
    smallLaneTimeThreshold?: number;
    /**
     * @generated from protobuf field: optional float junction_time_threshold = 38;
     */
    junctionTimeThreshold?: number;
    /**
     * @generated from protobuf field: optional float jam_vel_threshold = 39;
     */
    jamVelThreshold?: number;
    /**
     * @generated from protobuf field: optional float jam_num_threshold = 40;
     */
    jamNumThreshold?: number;
    /**
     * @generated from protobuf field: optional float jam_threshold = 41;
     */
    jamThreshold?: number;
    /**
     * @generated from protobuf field: optional float queue_dis_threshold = 42;
     */
    queueDisThreshold?: number;
    /**
     * @generated from protobuf field: optional float intrusion_time_threshold = 43;
     */
    intrusionTimeThreshold?: number;
    /**
     * @generated from protobuf field: optional float wrong_direct_dis_threshold = 44;
     */
    wrongDirectDisThreshold?: number;
    /**
     * channels
     *
     * @generated from protobuf field: optional string event_channel = 200;
     */
    eventChannel?: string;
}
/**
 * @generated from protobuf enum ec.event_config.EventConfig.LogLevel
 */
export enum EventConfig_LogLevel {
    /**
     * @generated from protobuf enum value: LOGLEVEL_START = 0;
     */
    LOGLEVEL_START = 0,
    /**
     * @generated from protobuf enum value: FETAL = 1;
     */
    FETAL = 1,
    /**
     * @generated from protobuf enum value: ERROR = 2;
     */
    ERROR = 2,
    /**
     * @generated from protobuf enum value: WARNING = 3;
     */
    WARNING = 3,
    /**
     * @generated from protobuf enum value: NOTICE = 4;
     */
    NOTICE = 4,
    /**
     * @generated from protobuf enum value: DEBUG = 5;
     */
    DEBUG = 5,
    /**
     * @generated from protobuf enum value: LOGLEVEL_END = 6;
     */
    LOGLEVEL_END = 6
}
// @generated message type with reflection information, may provide speed optimized methods
class EventConfig$Type extends MessageType<EventConfig> {
    constructor() {
        super("ec.event_config.EventConfig", [
            { no: 1, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "need_save_result", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "use_wgs", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "net_width", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "net_height", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "main_camera_calib", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "tele2wide_calib", kind: "scalar", jsonName: "tele2wideCalib", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "camera_ip_file", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "wide_lane_calib_file", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "tele_lane_calib_file", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "rtk_config_file", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "camera_config_file", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 22, name: "loglevel", kind: "enum", opt: true, T: () => ["ec.event_config.EventConfig.LogLevel", EventConfig_LogLevel] },
            { no: 23, name: "logpath", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 24, name: "app_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 30, name: "overspeed_vel_threshold", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 31, name: "overspeed_time_threshold", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 32, name: "underspeed_vel_threshold", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 33, name: "underspeed_time_threshold", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 34, name: "parking_vel_threshold", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 35, name: "parking_time_threshold", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 36, name: "emergency_time_threshold", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 37, name: "small_lane_time_threshold", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 38, name: "junction_time_threshold", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 39, name: "jam_vel_threshold", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 40, name: "jam_num_threshold", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 41, name: "jam_threshold", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 42, name: "queue_dis_threshold", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 43, name: "intrusion_time_threshold", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 44, name: "wrong_direct_dis_threshold", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 200, name: "event_channel", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EventConfig>): EventConfig {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EventConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventConfig): EventConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 group_id */ 1:
                    message.groupId = reader.uint32();
                    break;
                case /* optional bool need_save_result */ 2:
                    message.needSaveResult = reader.bool();
                    break;
                case /* optional bool use_wgs */ 3:
                    message.useWgs = reader.bool();
                    break;
                case /* optional int32 net_width */ 10:
                    message.netWidth = reader.int32();
                    break;
                case /* optional int32 net_height */ 11:
                    message.netHeight = reader.int32();
                    break;
                case /* optional string main_camera_calib */ 12:
                    message.mainCameraCalib = reader.string();
                    break;
                case /* optional string tele2wide_calib = 13 [json_name = "tele2wideCalib"];*/ 13:
                    message.tele2WideCalib = reader.string();
                    break;
                case /* optional string camera_ip_file */ 14:
                    message.cameraIpFile = reader.string();
                    break;
                case /* optional string wide_lane_calib_file */ 17:
                    message.wideLaneCalibFile = reader.string();
                    break;
                case /* optional string tele_lane_calib_file */ 18:
                    message.teleLaneCalibFile = reader.string();
                    break;
                case /* optional string rtk_config_file */ 19:
                    message.rtkConfigFile = reader.string();
                    break;
                case /* optional string camera_config_file */ 20:
                    message.cameraConfigFile = reader.string();
                    break;
                case /* optional ec.event_config.EventConfig.LogLevel loglevel */ 22:
                    message.loglevel = reader.int32();
                    break;
                case /* optional string logpath */ 23:
                    message.logpath = reader.string();
                    break;
                case /* optional string app_name */ 24:
                    message.appName = reader.string();
                    break;
                case /* optional float overspeed_vel_threshold */ 30:
                    message.overspeedVelThreshold = reader.float();
                    break;
                case /* optional float overspeed_time_threshold */ 31:
                    message.overspeedTimeThreshold = reader.float();
                    break;
                case /* optional float underspeed_vel_threshold */ 32:
                    message.underspeedVelThreshold = reader.float();
                    break;
                case /* optional float underspeed_time_threshold */ 33:
                    message.underspeedTimeThreshold = reader.float();
                    break;
                case /* optional float parking_vel_threshold */ 34:
                    message.parkingVelThreshold = reader.float();
                    break;
                case /* optional float parking_time_threshold */ 35:
                    message.parkingTimeThreshold = reader.float();
                    break;
                case /* optional float emergency_time_threshold */ 36:
                    message.emergencyTimeThreshold = reader.float();
                    break;
                case /* optional float small_lane_time_threshold */ 37:
                    message.smallLaneTimeThreshold = reader.float();
                    break;
                case /* optional float junction_time_threshold */ 38:
                    message.junctionTimeThreshold = reader.float();
                    break;
                case /* optional float jam_vel_threshold */ 39:
                    message.jamVelThreshold = reader.float();
                    break;
                case /* optional float jam_num_threshold */ 40:
                    message.jamNumThreshold = reader.float();
                    break;
                case /* optional float jam_threshold */ 41:
                    message.jamThreshold = reader.float();
                    break;
                case /* optional float queue_dis_threshold */ 42:
                    message.queueDisThreshold = reader.float();
                    break;
                case /* optional float intrusion_time_threshold */ 43:
                    message.intrusionTimeThreshold = reader.float();
                    break;
                case /* optional float wrong_direct_dis_threshold */ 44:
                    message.wrongDirectDisThreshold = reader.float();
                    break;
                case /* optional string event_channel */ 200:
                    message.eventChannel = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EventConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 group_id = 1; */
        if (message.groupId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.groupId);
        /* optional bool need_save_result = 2; */
        if (message.needSaveResult !== undefined)
            writer.tag(2, WireType.Varint).bool(message.needSaveResult);
        /* optional bool use_wgs = 3; */
        if (message.useWgs !== undefined)
            writer.tag(3, WireType.Varint).bool(message.useWgs);
        /* optional int32 net_width = 10; */
        if (message.netWidth !== undefined)
            writer.tag(10, WireType.Varint).int32(message.netWidth);
        /* optional int32 net_height = 11; */
        if (message.netHeight !== undefined)
            writer.tag(11, WireType.Varint).int32(message.netHeight);
        /* optional string main_camera_calib = 12; */
        if (message.mainCameraCalib !== undefined)
            writer.tag(12, WireType.LengthDelimited).string(message.mainCameraCalib);
        /* optional string tele2wide_calib = 13 [json_name = "tele2wideCalib"]; */
        if (message.tele2WideCalib !== undefined)
            writer.tag(13, WireType.LengthDelimited).string(message.tele2WideCalib);
        /* optional string camera_ip_file = 14; */
        if (message.cameraIpFile !== undefined)
            writer.tag(14, WireType.LengthDelimited).string(message.cameraIpFile);
        /* optional string wide_lane_calib_file = 17; */
        if (message.wideLaneCalibFile !== undefined)
            writer.tag(17, WireType.LengthDelimited).string(message.wideLaneCalibFile);
        /* optional string tele_lane_calib_file = 18; */
        if (message.teleLaneCalibFile !== undefined)
            writer.tag(18, WireType.LengthDelimited).string(message.teleLaneCalibFile);
        /* optional string rtk_config_file = 19; */
        if (message.rtkConfigFile !== undefined)
            writer.tag(19, WireType.LengthDelimited).string(message.rtkConfigFile);
        /* optional string camera_config_file = 20; */
        if (message.cameraConfigFile !== undefined)
            writer.tag(20, WireType.LengthDelimited).string(message.cameraConfigFile);
        /* optional ec.event_config.EventConfig.LogLevel loglevel = 22; */
        if (message.loglevel !== undefined)
            writer.tag(22, WireType.Varint).int32(message.loglevel);
        /* optional string logpath = 23; */
        if (message.logpath !== undefined)
            writer.tag(23, WireType.LengthDelimited).string(message.logpath);
        /* optional string app_name = 24; */
        if (message.appName !== undefined)
            writer.tag(24, WireType.LengthDelimited).string(message.appName);
        /* optional float overspeed_vel_threshold = 30; */
        if (message.overspeedVelThreshold !== undefined)
            writer.tag(30, WireType.Bit32).float(message.overspeedVelThreshold);
        /* optional float overspeed_time_threshold = 31; */
        if (message.overspeedTimeThreshold !== undefined)
            writer.tag(31, WireType.Bit32).float(message.overspeedTimeThreshold);
        /* optional float underspeed_vel_threshold = 32; */
        if (message.underspeedVelThreshold !== undefined)
            writer.tag(32, WireType.Bit32).float(message.underspeedVelThreshold);
        /* optional float underspeed_time_threshold = 33; */
        if (message.underspeedTimeThreshold !== undefined)
            writer.tag(33, WireType.Bit32).float(message.underspeedTimeThreshold);
        /* optional float parking_vel_threshold = 34; */
        if (message.parkingVelThreshold !== undefined)
            writer.tag(34, WireType.Bit32).float(message.parkingVelThreshold);
        /* optional float parking_time_threshold = 35; */
        if (message.parkingTimeThreshold !== undefined)
            writer.tag(35, WireType.Bit32).float(message.parkingTimeThreshold);
        /* optional float emergency_time_threshold = 36; */
        if (message.emergencyTimeThreshold !== undefined)
            writer.tag(36, WireType.Bit32).float(message.emergencyTimeThreshold);
        /* optional float small_lane_time_threshold = 37; */
        if (message.smallLaneTimeThreshold !== undefined)
            writer.tag(37, WireType.Bit32).float(message.smallLaneTimeThreshold);
        /* optional float junction_time_threshold = 38; */
        if (message.junctionTimeThreshold !== undefined)
            writer.tag(38, WireType.Bit32).float(message.junctionTimeThreshold);
        /* optional float jam_vel_threshold = 39; */
        if (message.jamVelThreshold !== undefined)
            writer.tag(39, WireType.Bit32).float(message.jamVelThreshold);
        /* optional float jam_num_threshold = 40; */
        if (message.jamNumThreshold !== undefined)
            writer.tag(40, WireType.Bit32).float(message.jamNumThreshold);
        /* optional float jam_threshold = 41; */
        if (message.jamThreshold !== undefined)
            writer.tag(41, WireType.Bit32).float(message.jamThreshold);
        /* optional float queue_dis_threshold = 42; */
        if (message.queueDisThreshold !== undefined)
            writer.tag(42, WireType.Bit32).float(message.queueDisThreshold);
        /* optional float intrusion_time_threshold = 43; */
        if (message.intrusionTimeThreshold !== undefined)
            writer.tag(43, WireType.Bit32).float(message.intrusionTimeThreshold);
        /* optional float wrong_direct_dis_threshold = 44; */
        if (message.wrongDirectDisThreshold !== undefined)
            writer.tag(44, WireType.Bit32).float(message.wrongDirectDisThreshold);
        /* optional string event_channel = 200; */
        if (message.eventChannel !== undefined)
            writer.tag(200, WireType.LengthDelimited).string(message.eventChannel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ec.event_config.EventConfig
 */
export const EventConfig = new EventConfig$Type();
