// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "BSTCVCommDef.proto" (package "autoplt.BSTCVCommDef", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message autoplt.BSTCVCommDef.CLASSIFICATION
 */
export interface CLASSIFICATION {
    /**
     * @generated from protobuf field: optional autoplt.BSTCVCommDef.ROADOBJECTTYPE obj_class = 1;
     */
    objClass?: ROADOBJECTTYPE;
    /**
     * @generated from protobuf field: optional float confidence_class = 2;
     */
    confidenceClass?: number;
}
/**
 * @generated from protobuf message autoplt.BSTCVCommDef.BBOX
 */
export interface BBOX {
    /**
     * @generated from protobuf field: optional float x1 = 1;
     */
    x1?: number;
    /**
     * @generated from protobuf field: optional float y1 = 2;
     */
    y1?: number;
    /**
     * @generated from protobuf field: optional float x2 = 3;
     */
    x2?: number;
    /**
     * @generated from protobuf field: optional float y2 = 4;
     */
    y2?: number; // left-top, right-bottom
    /**
     * @generated from protobuf field: optional float angle_x = 5;
     */
    angleX?: number;
    /**
     * @generated from protobuf field: optional float angle_y = 6;
     */
    angleY?: number;
    /**
     * @generated from protobuf field: optional float front_x = 7;
     */
    frontX?: number;
    /**
     * @generated from protobuf field: optional float front_y = 8;
     */
    frontY?: number;
    /**
     * @generated from protobuf field: optional float rear_x = 9;
     */
    rearX?: number;
    /**
     * @generated from protobuf field: optional float rear_y = 10;
     */
    rearY?: number;
}
/**
 * @generated from protobuf message autoplt.BSTCVCommDef.BBOX3D
 */
export interface BBOX3D {
    /**
     * @generated from protobuf field: optional float up_1_x = 1;
     */
    up1X?: number;
    /**
     * @generated from protobuf field: optional float up_1_y = 2;
     */
    up1Y?: number;
    /**
     * @generated from protobuf field: optional float up_2_x = 3;
     */
    up2X?: number;
    /**
     * @generated from protobuf field: optional float up_2_y = 4;
     */
    up2Y?: number;
    /**
     * @generated from protobuf field: optional float up_3_x = 5;
     */
    up3X?: number;
    /**
     * @generated from protobuf field: optional float up_3_y = 6;
     */
    up3Y?: number;
    /**
     * @generated from protobuf field: optional float up_4_x = 7;
     */
    up4X?: number;
    /**
     * @generated from protobuf field: optional float up_4_y = 8;
     */
    up4Y?: number;
    /**
     * @generated from protobuf field: optional float bottom_1_x = 9;
     */
    bottom1X?: number;
    /**
     * @generated from protobuf field: optional float bottom_1_y = 10;
     */
    bottom1Y?: number;
    /**
     * @generated from protobuf field: optional float bottom_2_x = 11;
     */
    bottom2X?: number;
    /**
     * @generated from protobuf field: optional float bottom_2_y = 12;
     */
    bottom2Y?: number;
    /**
     * @generated from protobuf field: optional float bottom_3_x = 13;
     */
    bottom3X?: number;
    /**
     * @generated from protobuf field: optional float bottom_3_y = 14;
     */
    bottom3Y?: number;
    /**
     * @generated from protobuf field: optional float bottom_4_x = 15;
     */
    bottom4X?: number;
    /**
     * @generated from protobuf field: optional float bottom_4_y = 16;
     */
    bottom4Y?: number;
}
/**
 * @generated from protobuf message autoplt.BSTCVCommDef.PlateResult
 */
export interface PlateResult {
    /**
     * @generated from protobuf field: optional string plate_string = 1;
     */
    plateString?: string;
    /**
     * @generated from protobuf field: optional float score = 2;
     */
    score?: number;
    /**
     * @generated from protobuf field: repeated int32 letter_indices = 3;
     */
    letterIndices: number[];
    /**
     * @generated from protobuf field: repeated float letter_scores = 4;
     */
    letterScores: number[];
}
/**
 * @generated from protobuf message autoplt.BSTCVCommDef.Header
 */
export interface Header {
    /**
     * @generated from protobuf field: optional uint32 seq = 1;
     */
    seq?: number;
    /**
     * @generated from protobuf field: optional uint64 timestamp = 2;
     */
    timestamp?: bigint;
    /**
     * @generated from protobuf field: optional string frame_id = 3;
     */
    frameId?: string;
}
/**
 * @generated from protobuf message autoplt.BSTCVCommDef.BBOXARRAY
 */
export interface BBOXARRAY {
    /**
     * @generated from protobuf field: optional autoplt.BSTCVCommDef.BBOX bbox = 1;
     */
    bbox?: BBOX; // network output
    /**
     * @generated from protobuf field: optional autoplt.BSTCVCommDef.BBOX3D bboxglobal = 2;
     */
    bboxglobal?: BBOX3D; // fusion output
}
/**
 * vehicle status of one timestamp
 *
 * @generated from protobuf message autoplt.BSTCVCommDef.BSTVECHILESTATUS
 */
export interface BSTVECHILESTATUS {
    /**
     * @generated from protobuf field: repeated autoplt.BSTCVCommDef.BBOXARRAY bboxarray = 1;
     */
    bboxarray: BBOXARRAY[]; // bbox array to record history bbox at different time stamp
    /**
     * @generated from protobuf field: optional float confidence = 2;
     */
    confidence?: number; // network output   
    /**
     * @generated from protobuf field: optional float x_offset = 3;
     */
    xOffset?: number;
    /**
     * @generated from protobuf field: optional int32 category_id = 4;
     */
    categoryId?: number;
    /**
     * @generated from protobuf field: repeated autoplt.BSTCVCommDef.CLASSIFICATION classification = 5;
     */
    classification: CLASSIFICATION[]; // network output
    /**
     * @generated from protobuf field: optional float width = 6;
     */
    width?: number; // fusion output
    /**
     * @generated from protobuf field: optional float length = 7;
     */
    length?: number; // fusion output
    /**
     * @generated from protobuf field: optional float height = 8;
     */
    height?: number; // fusion output
    /**
     * @generated from protobuf field: optional float width_var = 9;
     */
    widthVar?: number; // fusion output
    /**
     * @generated from protobuf field: optional float length_var = 10;
     */
    lengthVar?: number; // fusion output
    /**
     * @generated from protobuf field: optional float height_var = 11;
     */
    heightVar?: number; // fusion output
    /**
     * @generated from protobuf field: optional double position_cx = 12;
     */
    positionCx?: number; // fusion output
    /**
     * @generated from protobuf field: optional double position_cy = 13;
     */
    positionCy?: number; // fusion output
    /**
     * @generated from protobuf field: optional double to_camera_cx = 14;
     */
    toCameraCx?: number; // fusion output
    /**
     * @generated from protobuf field: optional double to_camera_cy = 15;
     */
    toCameraCy?: number; // fusion output
    /**
     * @generated from protobuf field: optional float yaw = 16;
     */
    yaw?: number; // fusion output
    /**
     * @generated from protobuf field: optional float yaw_rate = 17;
     */
    yawRate?: number; // fusion output
    /**
     * @generated from protobuf field: optional double velocity_x = 18;
     */
    velocityX?: number; // fusion output
    /**
     * @generated from protobuf field: optional double velocity_y = 19;
     */
    velocityY?: number; // fusion output
    /**
     * @generated from protobuf field: optional double velocity_z = 20;
     */
    velocityZ?: number; // fusion output
    /**
     * @generated from protobuf field: optional double acceleration_x = 21;
     */
    accelerationX?: number; // fusion output
    /**
     * @generated from protobuf field: optional double acceleration_y = 22;
     */
    accelerationY?: number; // fusion output
    /**
     * @generated from protobuf field: optional double acceleration_z = 23;
     */
    accelerationZ?: number; // fusion output
    /**
     * @generated from protobuf field: optional autoplt.BSTCVCommDef.ROADOBJECTORIENTATION obj_orientation = 24;
     */
    objOrientation?: ROADOBJECTORIENTATION;
    /**
     * @generated from protobuf field: optional autoplt.BSTCVCommDef.BBOX plate_box = 25;
     */
    plateBox?: BBOX;
    /**
     * @generated from protobuf field: optional bytes plate_img_data = 26;
     */
    plateImgData?: Uint8Array;
    /**
     * @generated from protobuf field: optional autoplt.BSTCVCommDef.PlateResult plate_result = 27;
     */
    plateResult?: PlateResult;
}
/**
 * @generated from protobuf message autoplt.BSTCVCommDef.SrcImage
 */
export interface SrcImage {
    /**
     * @generated from protobuf field: optional uint32 height = 1;
     */
    height?: number; // image height, that is, number of rows
    /**
     * @generated from protobuf field: optional uint32 width = 2;
     */
    width?: number; // image width, that is, number of columns
    /**
     * @generated from protobuf field: optional uint32 nodeindex = 3;
     */
    nodeindex?: number; // 1:net 2:3d 3:cvfusion
    /**
     * @generated from protobuf field: optional float fps = 4;
     */
    fps?: number;
    /**
     * @generated from protobuf field: optional uint32 step = 5;
     */
    step?: number; // Full row length in bytes
    /**
     * @generated from protobuf field: optional bytes data = 6;
     */
    data?: Uint8Array; // actual matrix data, size is (step * rows)
}
/**
 * @generated from protobuf message autoplt.BSTCVCommDef.ROADCVOBJECT
 */
export interface ROADCVOBJECT {
    /**
     * @generated from protobuf field: optional uint32 id = 1;
     */
    id?: number; // network output
    /**
     * @generated from protobuf field: optional uint64 time_stamp = 2;
     */
    timeStamp?: bigint; // sys read input
    /**
     * @generated from protobuf field: optional autoplt.BSTCVCommDef.BSTVECHILESTATUS status = 3;
     */
    status?: BSTVECHILESTATUS;
    /**
     * @generated from protobuf field: optional int32 cameraID = 4;
     */
    cameraID?: number; // cameraID of the image input
}
/**
 * @generated from protobuf message autoplt.BSTCVCommDef.ROADCV_OBJECT_LIST
 */
export interface ROADCV_OBJECT_LIST {
    /**
     * @generated from protobuf field: optional int32 objectnum = 1;
     */
    objectnum?: number; // total number of current detected objects
    /**
     * @generated from protobuf field: optional int32 cameraID = 2;
     */
    cameraID?: number; // cameraID of the image input
    /**
     * @generated from protobuf field: optional autoplt.BSTCVCommDef.Header header = 3;
     */
    header?: Header;
    /**
     * @generated from protobuf field: repeated autoplt.BSTCVCommDef.ROADCVOBJECT objectlist = 4;
     */
    objectlist: ROADCVOBJECT[]; // vector of objects
    /**
     * @generated from protobuf field: optional autoplt.BSTCVCommDef.SrcImage imagedata = 5;
     */
    imagedata?: SrcImage; // image for display
    /**
     * @generated from protobuf field: optional bool camera_ok = 6;
     */
    cameraOk?: boolean;
}
/**
 * @generated from protobuf enum autoplt.BSTCVCommDef.ROADOBJECTTYPE
 */
export enum ROADOBJECTTYPE {
    /**
     * @generated from protobuf enum value: BST_TYPE_CAR = 0;
     */
    BST_TYPE_CAR = 0,
    /**
     * @generated from protobuf enum value: BST_TYPE_CARSUV = 1;
     */
    BST_TYPE_CARSUV = 1,
    /**
     * @generated from protobuf enum value: BST_TYPE_VAN = 2;
     */
    BST_TYPE_VAN = 2,
    /**
     * @generated from protobuf enum value: BST_TYPE_BUS = 3;
     */
    BST_TYPE_BUS = 3,
    /**
     * @generated from protobuf enum value: BST_TYPE_TRUCK = 4;
     */
    BST_TYPE_TRUCK = 4,
    /**
     * @generated from protobuf enum value: BST_TYPE_CARSPECIAL = 5;
     */
    BST_TYPE_CARSPECIAL = 5,
    /**
     * @generated from protobuf enum value: BST_TYPE_MOTORCYCLE = 6;
     */
    BST_TYPE_MOTORCYCLE = 6,
    /**
     * @generated from protobuf enum value: BST_TYPE_BICYCLE = 7;
     */
    BST_TYPE_BICYCLE = 7,
    /**
     * @generated from protobuf enum value: BST_TYPE_RIDER = 8;
     */
    BST_TYPE_RIDER = 8,
    /**
     * @generated from protobuf enum value: BST_TYPE_TRICYCLE = 9;
     */
    BST_TYPE_TRICYCLE = 9,
    /**
     * @generated from protobuf enum value: BST_TYPE_PEDESTRIAN = 10;
     */
    BST_TYPE_PEDESTRIAN = 10,
    /**
     * @generated from protobuf enum value: BST_TYPE_TRAFFICSIGNS = 11;
     */
    BST_TYPE_TRAFFICSIGNS = 11,
    /**
     * @generated from protobuf enum value: BST_TYPE_TRAFFICCONE = 12;
     */
    BST_TYPE_TRAFFICCONE = 12,
    /**
     * @generated from protobuf enum value: BST_TYPE_UNKNOWN = 13;
     */
    BST_TYPE_UNKNOWN = 13,
    /**
     * @generated from protobuf enum value: BST_TYPE_PLATE = 14;
     */
    BST_TYPE_PLATE = 14
}
/**
 * @generated from protobuf enum autoplt.BSTCVCommDef.ROADOBJECTORIENTATION
 */
export enum ROADOBJECTORIENTATION {
    /**
     * @generated from protobuf enum value: BST_ORIENTATION_FRONT = 0;
     */
    BST_ORIENTATION_FRONT = 0,
    /**
     * @generated from protobuf enum value: BST_ORIENTATION_REAR = 1;
     */
    BST_ORIENTATION_REAR = 1,
    /**
     * @generated from protobuf enum value: BST_ORIENTATION_LEFT = 2;
     */
    BST_ORIENTATION_LEFT = 2,
    /**
     * @generated from protobuf enum value: BST_ORIENTATION_RIGHT = 3;
     */
    BST_ORIENTATION_RIGHT = 3,
    /**
     * @generated from protobuf enum value: BST_ORIENTATION_LEFTFRONT = 4;
     */
    BST_ORIENTATION_LEFTFRONT = 4,
    /**
     * @generated from protobuf enum value: BST_ORIENTATION_RIGHTFONT = 5;
     */
    BST_ORIENTATION_RIGHTFONT = 5,
    /**
     * @generated from protobuf enum value: BST_ORIENTATION_LEFTREAR = 6;
     */
    BST_ORIENTATION_LEFTREAR = 6,
    /**
     * @generated from protobuf enum value: BST_ORIENTATION_RIGHTREAR = 7;
     */
    BST_ORIENTATION_RIGHTREAR = 7
}
// @generated message type with reflection information, may provide speed optimized methods
class CLASSIFICATION$Type extends MessageType<CLASSIFICATION> {
    constructor() {
        super("autoplt.BSTCVCommDef.CLASSIFICATION", [
            { no: 1, name: "obj_class", kind: "enum", opt: true, T: () => ["autoplt.BSTCVCommDef.ROADOBJECTTYPE", ROADOBJECTTYPE] },
            { no: 2, name: "confidence_class", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<CLASSIFICATION>): CLASSIFICATION {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CLASSIFICATION>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CLASSIFICATION): CLASSIFICATION {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional autoplt.BSTCVCommDef.ROADOBJECTTYPE obj_class */ 1:
                    message.objClass = reader.int32();
                    break;
                case /* optional float confidence_class */ 2:
                    message.confidenceClass = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CLASSIFICATION, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional autoplt.BSTCVCommDef.ROADOBJECTTYPE obj_class = 1; */
        if (message.objClass !== undefined)
            writer.tag(1, WireType.Varint).int32(message.objClass);
        /* optional float confidence_class = 2; */
        if (message.confidenceClass !== undefined)
            writer.tag(2, WireType.Bit32).float(message.confidenceClass);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message autoplt.BSTCVCommDef.CLASSIFICATION
 */
export const CLASSIFICATION = new CLASSIFICATION$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BBOX$Type extends MessageType<BBOX> {
    constructor() {
        super("autoplt.BSTCVCommDef.BBOX", [
            { no: 1, name: "x1", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "y1", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "x2", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "y2", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "angle_x", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "angle_y", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 7, name: "front_x", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 8, name: "front_y", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 9, name: "rear_x", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 10, name: "rear_y", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<BBOX>): BBOX {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BBOX>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BBOX): BBOX {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional float x1 */ 1:
                    message.x1 = reader.float();
                    break;
                case /* optional float y1 */ 2:
                    message.y1 = reader.float();
                    break;
                case /* optional float x2 */ 3:
                    message.x2 = reader.float();
                    break;
                case /* optional float y2 */ 4:
                    message.y2 = reader.float();
                    break;
                case /* optional float angle_x */ 5:
                    message.angleX = reader.float();
                    break;
                case /* optional float angle_y */ 6:
                    message.angleY = reader.float();
                    break;
                case /* optional float front_x */ 7:
                    message.frontX = reader.float();
                    break;
                case /* optional float front_y */ 8:
                    message.frontY = reader.float();
                    break;
                case /* optional float rear_x */ 9:
                    message.rearX = reader.float();
                    break;
                case /* optional float rear_y */ 10:
                    message.rearY = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BBOX, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional float x1 = 1; */
        if (message.x1 !== undefined)
            writer.tag(1, WireType.Bit32).float(message.x1);
        /* optional float y1 = 2; */
        if (message.y1 !== undefined)
            writer.tag(2, WireType.Bit32).float(message.y1);
        /* optional float x2 = 3; */
        if (message.x2 !== undefined)
            writer.tag(3, WireType.Bit32).float(message.x2);
        /* optional float y2 = 4; */
        if (message.y2 !== undefined)
            writer.tag(4, WireType.Bit32).float(message.y2);
        /* optional float angle_x = 5; */
        if (message.angleX !== undefined)
            writer.tag(5, WireType.Bit32).float(message.angleX);
        /* optional float angle_y = 6; */
        if (message.angleY !== undefined)
            writer.tag(6, WireType.Bit32).float(message.angleY);
        /* optional float front_x = 7; */
        if (message.frontX !== undefined)
            writer.tag(7, WireType.Bit32).float(message.frontX);
        /* optional float front_y = 8; */
        if (message.frontY !== undefined)
            writer.tag(8, WireType.Bit32).float(message.frontY);
        /* optional float rear_x = 9; */
        if (message.rearX !== undefined)
            writer.tag(9, WireType.Bit32).float(message.rearX);
        /* optional float rear_y = 10; */
        if (message.rearY !== undefined)
            writer.tag(10, WireType.Bit32).float(message.rearY);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message autoplt.BSTCVCommDef.BBOX
 */
export const BBOX = new BBOX$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BBOX3D$Type extends MessageType<BBOX3D> {
    constructor() {
        super("autoplt.BSTCVCommDef.BBOX3D", [
            { no: 1, name: "up_1_x", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "up_1_y", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "up_2_x", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "up_2_y", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "up_3_x", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "up_3_y", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 7, name: "up_4_x", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 8, name: "up_4_y", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 9, name: "bottom_1_x", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 10, name: "bottom_1_y", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 11, name: "bottom_2_x", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 12, name: "bottom_2_y", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 13, name: "bottom_3_x", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 14, name: "bottom_3_y", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 15, name: "bottom_4_x", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 16, name: "bottom_4_y", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<BBOX3D>): BBOX3D {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BBOX3D>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BBOX3D): BBOX3D {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional float up_1_x */ 1:
                    message.up1X = reader.float();
                    break;
                case /* optional float up_1_y */ 2:
                    message.up1Y = reader.float();
                    break;
                case /* optional float up_2_x */ 3:
                    message.up2X = reader.float();
                    break;
                case /* optional float up_2_y */ 4:
                    message.up2Y = reader.float();
                    break;
                case /* optional float up_3_x */ 5:
                    message.up3X = reader.float();
                    break;
                case /* optional float up_3_y */ 6:
                    message.up3Y = reader.float();
                    break;
                case /* optional float up_4_x */ 7:
                    message.up4X = reader.float();
                    break;
                case /* optional float up_4_y */ 8:
                    message.up4Y = reader.float();
                    break;
                case /* optional float bottom_1_x */ 9:
                    message.bottom1X = reader.float();
                    break;
                case /* optional float bottom_1_y */ 10:
                    message.bottom1Y = reader.float();
                    break;
                case /* optional float bottom_2_x */ 11:
                    message.bottom2X = reader.float();
                    break;
                case /* optional float bottom_2_y */ 12:
                    message.bottom2Y = reader.float();
                    break;
                case /* optional float bottom_3_x */ 13:
                    message.bottom3X = reader.float();
                    break;
                case /* optional float bottom_3_y */ 14:
                    message.bottom3Y = reader.float();
                    break;
                case /* optional float bottom_4_x */ 15:
                    message.bottom4X = reader.float();
                    break;
                case /* optional float bottom_4_y */ 16:
                    message.bottom4Y = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BBOX3D, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional float up_1_x = 1; */
        if (message.up1X !== undefined)
            writer.tag(1, WireType.Bit32).float(message.up1X);
        /* optional float up_1_y = 2; */
        if (message.up1Y !== undefined)
            writer.tag(2, WireType.Bit32).float(message.up1Y);
        /* optional float up_2_x = 3; */
        if (message.up2X !== undefined)
            writer.tag(3, WireType.Bit32).float(message.up2X);
        /* optional float up_2_y = 4; */
        if (message.up2Y !== undefined)
            writer.tag(4, WireType.Bit32).float(message.up2Y);
        /* optional float up_3_x = 5; */
        if (message.up3X !== undefined)
            writer.tag(5, WireType.Bit32).float(message.up3X);
        /* optional float up_3_y = 6; */
        if (message.up3Y !== undefined)
            writer.tag(6, WireType.Bit32).float(message.up3Y);
        /* optional float up_4_x = 7; */
        if (message.up4X !== undefined)
            writer.tag(7, WireType.Bit32).float(message.up4X);
        /* optional float up_4_y = 8; */
        if (message.up4Y !== undefined)
            writer.tag(8, WireType.Bit32).float(message.up4Y);
        /* optional float bottom_1_x = 9; */
        if (message.bottom1X !== undefined)
            writer.tag(9, WireType.Bit32).float(message.bottom1X);
        /* optional float bottom_1_y = 10; */
        if (message.bottom1Y !== undefined)
            writer.tag(10, WireType.Bit32).float(message.bottom1Y);
        /* optional float bottom_2_x = 11; */
        if (message.bottom2X !== undefined)
            writer.tag(11, WireType.Bit32).float(message.bottom2X);
        /* optional float bottom_2_y = 12; */
        if (message.bottom2Y !== undefined)
            writer.tag(12, WireType.Bit32).float(message.bottom2Y);
        /* optional float bottom_3_x = 13; */
        if (message.bottom3X !== undefined)
            writer.tag(13, WireType.Bit32).float(message.bottom3X);
        /* optional float bottom_3_y = 14; */
        if (message.bottom3Y !== undefined)
            writer.tag(14, WireType.Bit32).float(message.bottom3Y);
        /* optional float bottom_4_x = 15; */
        if (message.bottom4X !== undefined)
            writer.tag(15, WireType.Bit32).float(message.bottom4X);
        /* optional float bottom_4_y = 16; */
        if (message.bottom4Y !== undefined)
            writer.tag(16, WireType.Bit32).float(message.bottom4Y);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message autoplt.BSTCVCommDef.BBOX3D
 */
export const BBOX3D = new BBOX3D$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlateResult$Type extends MessageType<PlateResult> {
    constructor() {
        super("autoplt.BSTCVCommDef.PlateResult", [
            { no: 1, name: "plate_string", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "score", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "letter_indices", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "letter_scores", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<PlateResult>): PlateResult {
        const message = { letterIndices: [], letterScores: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlateResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlateResult): PlateResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string plate_string */ 1:
                    message.plateString = reader.string();
                    break;
                case /* optional float score */ 2:
                    message.score = reader.float();
                    break;
                case /* repeated int32 letter_indices */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.letterIndices.push(reader.int32());
                    else
                        message.letterIndices.push(reader.int32());
                    break;
                case /* repeated float letter_scores */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.letterScores.push(reader.float());
                    else
                        message.letterScores.push(reader.float());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlateResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string plate_string = 1; */
        if (message.plateString !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.plateString);
        /* optional float score = 2; */
        if (message.score !== undefined)
            writer.tag(2, WireType.Bit32).float(message.score);
        /* repeated int32 letter_indices = 3; */
        for (let i = 0; i < message.letterIndices.length; i++)
            writer.tag(3, WireType.Varint).int32(message.letterIndices[i]);
        /* repeated float letter_scores = 4; */
        for (let i = 0; i < message.letterScores.length; i++)
            writer.tag(4, WireType.Bit32).float(message.letterScores[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message autoplt.BSTCVCommDef.PlateResult
 */
export const PlateResult = new PlateResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Header$Type extends MessageType<Header> {
    constructor() {
        super("autoplt.BSTCVCommDef.Header", [
            { no: 1, name: "seq", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "timestamp", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "frame_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Header>): Header {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Header>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Header): Header {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 seq */ 1:
                    message.seq = reader.uint32();
                    break;
                case /* optional uint64 timestamp */ 2:
                    message.timestamp = reader.uint64().toBigInt();
                    break;
                case /* optional string frame_id */ 3:
                    message.frameId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Header, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 seq = 1; */
        if (message.seq !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.seq);
        /* optional uint64 timestamp = 2; */
        if (message.timestamp !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.timestamp);
        /* optional string frame_id = 3; */
        if (message.frameId !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.frameId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message autoplt.BSTCVCommDef.Header
 */
export const Header = new Header$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BBOXARRAY$Type extends MessageType<BBOXARRAY> {
    constructor() {
        super("autoplt.BSTCVCommDef.BBOXARRAY", [
            { no: 1, name: "bbox", kind: "message", T: () => BBOX },
            { no: 2, name: "bboxglobal", kind: "message", T: () => BBOX3D }
        ]);
    }
    create(value?: PartialMessage<BBOXARRAY>): BBOXARRAY {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BBOXARRAY>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BBOXARRAY): BBOXARRAY {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional autoplt.BSTCVCommDef.BBOX bbox */ 1:
                    message.bbox = BBOX.internalBinaryRead(reader, reader.uint32(), options, message.bbox);
                    break;
                case /* optional autoplt.BSTCVCommDef.BBOX3D bboxglobal */ 2:
                    message.bboxglobal = BBOX3D.internalBinaryRead(reader, reader.uint32(), options, message.bboxglobal);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BBOXARRAY, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional autoplt.BSTCVCommDef.BBOX bbox = 1; */
        if (message.bbox)
            BBOX.internalBinaryWrite(message.bbox, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional autoplt.BSTCVCommDef.BBOX3D bboxglobal = 2; */
        if (message.bboxglobal)
            BBOX3D.internalBinaryWrite(message.bboxglobal, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message autoplt.BSTCVCommDef.BBOXARRAY
 */
export const BBOXARRAY = new BBOXARRAY$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BSTVECHILESTATUS$Type extends MessageType<BSTVECHILESTATUS> {
    constructor() {
        super("autoplt.BSTCVCommDef.BSTVECHILESTATUS", [
            { no: 1, name: "bboxarray", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => BBOXARRAY },
            { no: 2, name: "confidence", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "x_offset", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "category_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "classification", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CLASSIFICATION },
            { no: 6, name: "width", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 7, name: "length", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 8, name: "height", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 9, name: "width_var", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 10, name: "length_var", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 11, name: "height_var", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 12, name: "position_cx", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 13, name: "position_cy", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 14, name: "to_camera_cx", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 15, name: "to_camera_cy", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 16, name: "yaw", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 17, name: "yaw_rate", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 18, name: "velocity_x", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 19, name: "velocity_y", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 20, name: "velocity_z", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 21, name: "acceleration_x", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 22, name: "acceleration_y", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 23, name: "acceleration_z", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 24, name: "obj_orientation", kind: "enum", opt: true, T: () => ["autoplt.BSTCVCommDef.ROADOBJECTORIENTATION", ROADOBJECTORIENTATION] },
            { no: 25, name: "plate_box", kind: "message", T: () => BBOX },
            { no: 26, name: "plate_img_data", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 27, name: "plate_result", kind: "message", T: () => PlateResult }
        ]);
    }
    create(value?: PartialMessage<BSTVECHILESTATUS>): BSTVECHILESTATUS {
        const message = { bboxarray: [], classification: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BSTVECHILESTATUS>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BSTVECHILESTATUS): BSTVECHILESTATUS {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated autoplt.BSTCVCommDef.BBOXARRAY bboxarray */ 1:
                    message.bboxarray.push(BBOXARRAY.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional float confidence */ 2:
                    message.confidence = reader.float();
                    break;
                case /* optional float x_offset */ 3:
                    message.xOffset = reader.float();
                    break;
                case /* optional int32 category_id */ 4:
                    message.categoryId = reader.int32();
                    break;
                case /* repeated autoplt.BSTCVCommDef.CLASSIFICATION classification */ 5:
                    message.classification.push(CLASSIFICATION.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional float width */ 6:
                    message.width = reader.float();
                    break;
                case /* optional float length */ 7:
                    message.length = reader.float();
                    break;
                case /* optional float height */ 8:
                    message.height = reader.float();
                    break;
                case /* optional float width_var */ 9:
                    message.widthVar = reader.float();
                    break;
                case /* optional float length_var */ 10:
                    message.lengthVar = reader.float();
                    break;
                case /* optional float height_var */ 11:
                    message.heightVar = reader.float();
                    break;
                case /* optional double position_cx */ 12:
                    message.positionCx = reader.double();
                    break;
                case /* optional double position_cy */ 13:
                    message.positionCy = reader.double();
                    break;
                case /* optional double to_camera_cx */ 14:
                    message.toCameraCx = reader.double();
                    break;
                case /* optional double to_camera_cy */ 15:
                    message.toCameraCy = reader.double();
                    break;
                case /* optional float yaw */ 16:
                    message.yaw = reader.float();
                    break;
                case /* optional float yaw_rate */ 17:
                    message.yawRate = reader.float();
                    break;
                case /* optional double velocity_x */ 18:
                    message.velocityX = reader.double();
                    break;
                case /* optional double velocity_y */ 19:
                    message.velocityY = reader.double();
                    break;
                case /* optional double velocity_z */ 20:
                    message.velocityZ = reader.double();
                    break;
                case /* optional double acceleration_x */ 21:
                    message.accelerationX = reader.double();
                    break;
                case /* optional double acceleration_y */ 22:
                    message.accelerationY = reader.double();
                    break;
                case /* optional double acceleration_z */ 23:
                    message.accelerationZ = reader.double();
                    break;
                case /* optional autoplt.BSTCVCommDef.ROADOBJECTORIENTATION obj_orientation */ 24:
                    message.objOrientation = reader.int32();
                    break;
                case /* optional autoplt.BSTCVCommDef.BBOX plate_box */ 25:
                    message.plateBox = BBOX.internalBinaryRead(reader, reader.uint32(), options, message.plateBox);
                    break;
                case /* optional bytes plate_img_data */ 26:
                    message.plateImgData = reader.bytes();
                    break;
                case /* optional autoplt.BSTCVCommDef.PlateResult plate_result */ 27:
                    message.plateResult = PlateResult.internalBinaryRead(reader, reader.uint32(), options, message.plateResult);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BSTVECHILESTATUS, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated autoplt.BSTCVCommDef.BBOXARRAY bboxarray = 1; */
        for (let i = 0; i < message.bboxarray.length; i++)
            BBOXARRAY.internalBinaryWrite(message.bboxarray[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional float confidence = 2; */
        if (message.confidence !== undefined)
            writer.tag(2, WireType.Bit32).float(message.confidence);
        /* optional float x_offset = 3; */
        if (message.xOffset !== undefined)
            writer.tag(3, WireType.Bit32).float(message.xOffset);
        /* optional int32 category_id = 4; */
        if (message.categoryId !== undefined)
            writer.tag(4, WireType.Varint).int32(message.categoryId);
        /* repeated autoplt.BSTCVCommDef.CLASSIFICATION classification = 5; */
        for (let i = 0; i < message.classification.length; i++)
            CLASSIFICATION.internalBinaryWrite(message.classification[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional float width = 6; */
        if (message.width !== undefined)
            writer.tag(6, WireType.Bit32).float(message.width);
        /* optional float length = 7; */
        if (message.length !== undefined)
            writer.tag(7, WireType.Bit32).float(message.length);
        /* optional float height = 8; */
        if (message.height !== undefined)
            writer.tag(8, WireType.Bit32).float(message.height);
        /* optional float width_var = 9; */
        if (message.widthVar !== undefined)
            writer.tag(9, WireType.Bit32).float(message.widthVar);
        /* optional float length_var = 10; */
        if (message.lengthVar !== undefined)
            writer.tag(10, WireType.Bit32).float(message.lengthVar);
        /* optional float height_var = 11; */
        if (message.heightVar !== undefined)
            writer.tag(11, WireType.Bit32).float(message.heightVar);
        /* optional double position_cx = 12; */
        if (message.positionCx !== undefined)
            writer.tag(12, WireType.Bit64).double(message.positionCx);
        /* optional double position_cy = 13; */
        if (message.positionCy !== undefined)
            writer.tag(13, WireType.Bit64).double(message.positionCy);
        /* optional double to_camera_cx = 14; */
        if (message.toCameraCx !== undefined)
            writer.tag(14, WireType.Bit64).double(message.toCameraCx);
        /* optional double to_camera_cy = 15; */
        if (message.toCameraCy !== undefined)
            writer.tag(15, WireType.Bit64).double(message.toCameraCy);
        /* optional float yaw = 16; */
        if (message.yaw !== undefined)
            writer.tag(16, WireType.Bit32).float(message.yaw);
        /* optional float yaw_rate = 17; */
        if (message.yawRate !== undefined)
            writer.tag(17, WireType.Bit32).float(message.yawRate);
        /* optional double velocity_x = 18; */
        if (message.velocityX !== undefined)
            writer.tag(18, WireType.Bit64).double(message.velocityX);
        /* optional double velocity_y = 19; */
        if (message.velocityY !== undefined)
            writer.tag(19, WireType.Bit64).double(message.velocityY);
        /* optional double velocity_z = 20; */
        if (message.velocityZ !== undefined)
            writer.tag(20, WireType.Bit64).double(message.velocityZ);
        /* optional double acceleration_x = 21; */
        if (message.accelerationX !== undefined)
            writer.tag(21, WireType.Bit64).double(message.accelerationX);
        /* optional double acceleration_y = 22; */
        if (message.accelerationY !== undefined)
            writer.tag(22, WireType.Bit64).double(message.accelerationY);
        /* optional double acceleration_z = 23; */
        if (message.accelerationZ !== undefined)
            writer.tag(23, WireType.Bit64).double(message.accelerationZ);
        /* optional autoplt.BSTCVCommDef.ROADOBJECTORIENTATION obj_orientation = 24; */
        if (message.objOrientation !== undefined)
            writer.tag(24, WireType.Varint).int32(message.objOrientation);
        /* optional autoplt.BSTCVCommDef.BBOX plate_box = 25; */
        if (message.plateBox)
            BBOX.internalBinaryWrite(message.plateBox, writer.tag(25, WireType.LengthDelimited).fork(), options).join();
        /* optional bytes plate_img_data = 26; */
        if (message.plateImgData !== undefined)
            writer.tag(26, WireType.LengthDelimited).bytes(message.plateImgData);
        /* optional autoplt.BSTCVCommDef.PlateResult plate_result = 27; */
        if (message.plateResult)
            PlateResult.internalBinaryWrite(message.plateResult, writer.tag(27, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message autoplt.BSTCVCommDef.BSTVECHILESTATUS
 */
export const BSTVECHILESTATUS = new BSTVECHILESTATUS$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SrcImage$Type extends MessageType<SrcImage> {
    constructor() {
        super("autoplt.BSTCVCommDef.SrcImage", [
            { no: 1, name: "height", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "width", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "nodeindex", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "fps", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "step", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "data", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<SrcImage>): SrcImage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SrcImage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SrcImage): SrcImage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 height */ 1:
                    message.height = reader.uint32();
                    break;
                case /* optional uint32 width */ 2:
                    message.width = reader.uint32();
                    break;
                case /* optional uint32 nodeindex */ 3:
                    message.nodeindex = reader.uint32();
                    break;
                case /* optional float fps */ 4:
                    message.fps = reader.float();
                    break;
                case /* optional uint32 step */ 5:
                    message.step = reader.uint32();
                    break;
                case /* optional bytes data */ 6:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SrcImage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 height = 1; */
        if (message.height !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.height);
        /* optional uint32 width = 2; */
        if (message.width !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.width);
        /* optional uint32 nodeindex = 3; */
        if (message.nodeindex !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.nodeindex);
        /* optional float fps = 4; */
        if (message.fps !== undefined)
            writer.tag(4, WireType.Bit32).float(message.fps);
        /* optional uint32 step = 5; */
        if (message.step !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.step);
        /* optional bytes data = 6; */
        if (message.data !== undefined)
            writer.tag(6, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message autoplt.BSTCVCommDef.SrcImage
 */
export const SrcImage = new SrcImage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ROADCVOBJECT$Type extends MessageType<ROADCVOBJECT> {
    constructor() {
        super("autoplt.BSTCVCommDef.ROADCVOBJECT", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "time_stamp", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "status", kind: "message", T: () => BSTVECHILESTATUS },
            { no: 4, name: "cameraID", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ROADCVOBJECT>): ROADCVOBJECT {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ROADCVOBJECT>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ROADCVOBJECT): ROADCVOBJECT {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* optional uint64 time_stamp */ 2:
                    message.timeStamp = reader.uint64().toBigInt();
                    break;
                case /* optional autoplt.BSTCVCommDef.BSTVECHILESTATUS status */ 3:
                    message.status = BSTVECHILESTATUS.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* optional int32 cameraID */ 4:
                    message.cameraID = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ROADCVOBJECT, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* optional uint64 time_stamp = 2; */
        if (message.timeStamp !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.timeStamp);
        /* optional autoplt.BSTCVCommDef.BSTVECHILESTATUS status = 3; */
        if (message.status)
            BSTVECHILESTATUS.internalBinaryWrite(message.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 cameraID = 4; */
        if (message.cameraID !== undefined)
            writer.tag(4, WireType.Varint).int32(message.cameraID);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message autoplt.BSTCVCommDef.ROADCVOBJECT
 */
export const ROADCVOBJECT = new ROADCVOBJECT$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ROADCV_OBJECT_LIST$Type extends MessageType<ROADCV_OBJECT_LIST> {
    constructor() {
        super("autoplt.BSTCVCommDef.ROADCV_OBJECT_LIST", [
            { no: 1, name: "objectnum", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "cameraID", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "header", kind: "message", T: () => Header },
            { no: 4, name: "objectlist", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ROADCVOBJECT },
            { no: 5, name: "imagedata", kind: "message", T: () => SrcImage },
            { no: 6, name: "camera_ok", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ROADCV_OBJECT_LIST>): ROADCV_OBJECT_LIST {
        const message = { objectlist: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ROADCV_OBJECT_LIST>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ROADCV_OBJECT_LIST): ROADCV_OBJECT_LIST {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 objectnum */ 1:
                    message.objectnum = reader.int32();
                    break;
                case /* optional int32 cameraID */ 2:
                    message.cameraID = reader.int32();
                    break;
                case /* optional autoplt.BSTCVCommDef.Header header */ 3:
                    message.header = Header.internalBinaryRead(reader, reader.uint32(), options, message.header);
                    break;
                case /* repeated autoplt.BSTCVCommDef.ROADCVOBJECT objectlist */ 4:
                    message.objectlist.push(ROADCVOBJECT.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional autoplt.BSTCVCommDef.SrcImage imagedata */ 5:
                    message.imagedata = SrcImage.internalBinaryRead(reader, reader.uint32(), options, message.imagedata);
                    break;
                case /* optional bool camera_ok */ 6:
                    message.cameraOk = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ROADCV_OBJECT_LIST, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 objectnum = 1; */
        if (message.objectnum !== undefined)
            writer.tag(1, WireType.Varint).int32(message.objectnum);
        /* optional int32 cameraID = 2; */
        if (message.cameraID !== undefined)
            writer.tag(2, WireType.Varint).int32(message.cameraID);
        /* optional autoplt.BSTCVCommDef.Header header = 3; */
        if (message.header)
            Header.internalBinaryWrite(message.header, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated autoplt.BSTCVCommDef.ROADCVOBJECT objectlist = 4; */
        for (let i = 0; i < message.objectlist.length; i++)
            ROADCVOBJECT.internalBinaryWrite(message.objectlist[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional autoplt.BSTCVCommDef.SrcImage imagedata = 5; */
        if (message.imagedata)
            SrcImage.internalBinaryWrite(message.imagedata, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional bool camera_ok = 6; */
        if (message.cameraOk !== undefined)
            writer.tag(6, WireType.Varint).bool(message.cameraOk);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message autoplt.BSTCVCommDef.ROADCV_OBJECT_LIST
 */
export const ROADCV_OBJECT_LIST = new ROADCV_OBJECT_LIST$Type();
