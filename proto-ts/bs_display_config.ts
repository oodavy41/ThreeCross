// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "bs_display_config.proto" (package "autoplt.bsdisplay.config", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message autoplt.bsdisplay.config.BSDisplayConfig
 */
export interface BSDisplayConfig {
    /**
     * @generated from protobuf field: string bs_data_channel = 1;
     */
    bsDataChannel: string;
    /**
     * @generated from protobuf field: optional uint32 server_port = 2;
     */
    serverPort?: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class BSDisplayConfig$Type extends MessageType<BSDisplayConfig> {
    constructor() {
        super("autoplt.bsdisplay.config.BSDisplayConfig", [
            { no: 1, name: "bs_data_channel", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "server_port", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BSDisplayConfig>): BSDisplayConfig {
        const message = { bsDataChannel: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BSDisplayConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BSDisplayConfig): BSDisplayConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string bs_data_channel */ 1:
                    message.bsDataChannel = reader.string();
                    break;
                case /* optional uint32 server_port */ 2:
                    message.serverPort = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BSDisplayConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string bs_data_channel = 1; */
        if (message.bsDataChannel !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.bsDataChannel);
        /* optional uint32 server_port = 2; */
        if (message.serverPort !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.serverPort);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message autoplt.bsdisplay.config.BSDisplayConfig
 */
export const BSDisplayConfig = new BSDisplayConfig$Type();
