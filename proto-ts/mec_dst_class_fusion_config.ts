// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "mec_dst_class_fusion_config.proto" (package "autoplt.fusion.dstclassfusion", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message autoplt.fusion.dstclassfusion.CameraDstClassFusionParam
 */
export interface CameraDstClassFusionParam {
    /**
     * @generated from protobuf field: optional string name = 1;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional double valid_dist = 2;
     */
    validDist?: number;
    /**
     * @generated from protobuf field: optional double reliability = 3;
     */
    reliability?: number;
    /**
     * @generated from protobuf field: optional double reliability_for_unknown = 4;
     */
    reliabilityForUnknown?: number;
}
/**
 * @generated from protobuf message autoplt.fusion.dstclassfusion.LidarDstClassFusionParam
 */
export interface LidarDstClassFusionParam {
    /**
     * @generated from protobuf field: optional string name = 1;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional double reliability = 2;
     */
    reliability?: number;
    /**
     * @generated from protobuf field: optional double reliability_for_unknown = 3;
     */
    reliabilityForUnknown?: number;
}
/**
 * @generated from protobuf message autoplt.fusion.dstclassfusion.DstClassFusionConfig
 */
export interface DstClassFusionConfig {
    /**
     * @generated from protobuf field: repeated autoplt.fusion.dstclassfusion.CameraDstClassFusionParam camera_params = 1;
     */
    cameraParams: CameraDstClassFusionParam[];
    /**
     * @generated from protobuf field: repeated autoplt.fusion.dstclassfusion.LidarDstClassFusionParam lidar_params = 2;
     */
    lidarParams: LidarDstClassFusionParam[];
}
// @generated message type with reflection information, may provide speed optimized methods
class CameraDstClassFusionParam$Type extends MessageType<CameraDstClassFusionParam> {
    constructor() {
        super("autoplt.fusion.dstclassfusion.CameraDstClassFusionParam", [
            { no: 1, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "valid_dist", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "reliability", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "reliability_for_unknown", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<CameraDstClassFusionParam>): CameraDstClassFusionParam {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CameraDstClassFusionParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CameraDstClassFusionParam): CameraDstClassFusionParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string name */ 1:
                    message.name = reader.string();
                    break;
                case /* optional double valid_dist */ 2:
                    message.validDist = reader.double();
                    break;
                case /* optional double reliability */ 3:
                    message.reliability = reader.double();
                    break;
                case /* optional double reliability_for_unknown */ 4:
                    message.reliabilityForUnknown = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CameraDstClassFusionParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string name = 1; */
        if (message.name !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* optional double valid_dist = 2; */
        if (message.validDist !== undefined)
            writer.tag(2, WireType.Bit64).double(message.validDist);
        /* optional double reliability = 3; */
        if (message.reliability !== undefined)
            writer.tag(3, WireType.Bit64).double(message.reliability);
        /* optional double reliability_for_unknown = 4; */
        if (message.reliabilityForUnknown !== undefined)
            writer.tag(4, WireType.Bit64).double(message.reliabilityForUnknown);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message autoplt.fusion.dstclassfusion.CameraDstClassFusionParam
 */
export const CameraDstClassFusionParam = new CameraDstClassFusionParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LidarDstClassFusionParam$Type extends MessageType<LidarDstClassFusionParam> {
    constructor() {
        super("autoplt.fusion.dstclassfusion.LidarDstClassFusionParam", [
            { no: 1, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "reliability", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "reliability_for_unknown", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<LidarDstClassFusionParam>): LidarDstClassFusionParam {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LidarDstClassFusionParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LidarDstClassFusionParam): LidarDstClassFusionParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string name */ 1:
                    message.name = reader.string();
                    break;
                case /* optional double reliability */ 2:
                    message.reliability = reader.double();
                    break;
                case /* optional double reliability_for_unknown */ 3:
                    message.reliabilityForUnknown = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LidarDstClassFusionParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string name = 1; */
        if (message.name !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* optional double reliability = 2; */
        if (message.reliability !== undefined)
            writer.tag(2, WireType.Bit64).double(message.reliability);
        /* optional double reliability_for_unknown = 3; */
        if (message.reliabilityForUnknown !== undefined)
            writer.tag(3, WireType.Bit64).double(message.reliabilityForUnknown);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message autoplt.fusion.dstclassfusion.LidarDstClassFusionParam
 */
export const LidarDstClassFusionParam = new LidarDstClassFusionParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DstClassFusionConfig$Type extends MessageType<DstClassFusionConfig> {
    constructor() {
        super("autoplt.fusion.dstclassfusion.DstClassFusionConfig", [
            { no: 1, name: "camera_params", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CameraDstClassFusionParam },
            { no: 2, name: "lidar_params", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => LidarDstClassFusionParam }
        ]);
    }
    create(value?: PartialMessage<DstClassFusionConfig>): DstClassFusionConfig {
        const message = { cameraParams: [], lidarParams: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DstClassFusionConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DstClassFusionConfig): DstClassFusionConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated autoplt.fusion.dstclassfusion.CameraDstClassFusionParam camera_params */ 1:
                    message.cameraParams.push(CameraDstClassFusionParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated autoplt.fusion.dstclassfusion.LidarDstClassFusionParam lidar_params */ 2:
                    message.lidarParams.push(LidarDstClassFusionParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DstClassFusionConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated autoplt.fusion.dstclassfusion.CameraDstClassFusionParam camera_params = 1; */
        for (let i = 0; i < message.cameraParams.length; i++)
            CameraDstClassFusionParam.internalBinaryWrite(message.cameraParams[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated autoplt.fusion.dstclassfusion.LidarDstClassFusionParam lidar_params = 2; */
        for (let i = 0; i < message.lidarParams.length; i++)
            LidarDstClassFusionParam.internalBinaryWrite(message.lidarParams[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message autoplt.fusion.dstclassfusion.DstClassFusionConfig
 */
export const DstClassFusionConfig = new DstClassFusionConfig$Type();
