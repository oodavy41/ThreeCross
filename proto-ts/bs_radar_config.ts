// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "bs_radar_config.proto" (package "autoplt.radarconfig", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message autoplt.radarconfig.BSRadarConfig
 */
export interface BSRadarConfig {
    /**
     * @generated from protobuf field: optional uint32 radar_id = 1;
     */
    radarId?: number;
    /**
     * @generated from protobuf field: optional autoplt.radarconfig.RadarType radar_type = 2;
     */
    radarType?: RadarType;
    /**
     * @generated from protobuf field: optional string radar_ip = 3;
     */
    radarIp?: string;
    /**
     * @generated from protobuf field: optional uint32 radar_port = 4;
     */
    radarPort?: number;
}
/**
 * @generated from protobuf enum autoplt.radarconfig.RadarType
 */
export enum RadarType {
    /**
     * @generated from protobuf enum value: ETH_MC = 0;
     */
    ETH_MC = 0,
    /**
     * @generated from protobuf enum value: ETH_WHST = 1;
     */
    ETH_WHST = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class BSRadarConfig$Type extends MessageType<BSRadarConfig> {
    constructor() {
        super("autoplt.radarconfig.BSRadarConfig", [
            { no: 1, name: "radar_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "radar_type", kind: "enum", opt: true, T: () => ["autoplt.radarconfig.RadarType", RadarType] },
            { no: 3, name: "radar_ip", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "radar_port", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BSRadarConfig>): BSRadarConfig {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BSRadarConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BSRadarConfig): BSRadarConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 radar_id */ 1:
                    message.radarId = reader.uint32();
                    break;
                case /* optional autoplt.radarconfig.RadarType radar_type */ 2:
                    message.radarType = reader.int32();
                    break;
                case /* optional string radar_ip */ 3:
                    message.radarIp = reader.string();
                    break;
                case /* optional uint32 radar_port */ 4:
                    message.radarPort = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BSRadarConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 radar_id = 1; */
        if (message.radarId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.radarId);
        /* optional autoplt.radarconfig.RadarType radar_type = 2; */
        if (message.radarType !== undefined)
            writer.tag(2, WireType.Varint).int32(message.radarType);
        /* optional string radar_ip = 3; */
        if (message.radarIp !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.radarIp);
        /* optional uint32 radar_port = 4; */
        if (message.radarPort !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.radarPort);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message autoplt.radarconfig.BSRadarConfig
 */
export const BSRadarConfig = new BSRadarConfig$Type();
