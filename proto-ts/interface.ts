// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "interface.proto" (package "ec.interface", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ec.interface.Header
 */
export interface Header {
    /**
     * @generated from protobuf field: optional uint32 seq = 1;
     */
    seq?: number;
    /**
     * @generated from protobuf field: optional uint64 timestamp = 2;
     */
    timestamp?: bigint;
    /**
     * @generated from protobuf field: optional string frame_id = 3;
     */
    frameId?: string;
}
/**
 * @generated from protobuf message ec.interface.CLASSIFICATION
 */
export interface CLASSIFICATION {
    /**
     * @generated from protobuf field: optional ec.interface.ROADOBJECTTYPE obj_class = 1;
     */
    objClass?: ROADOBJECTTYPE;
    /**
     * @generated from protobuf field: optional float confidence_class = 2;
     */
    confidenceClass?: number;
}
/**
 * @generated from protobuf message ec.interface.BBOX
 */
export interface BBOX {
    /**
     * @generated from protobuf field: optional float x1 = 1;
     */
    x1?: number;
    /**
     * @generated from protobuf field: optional float y1 = 2;
     */
    y1?: number;
    /**
     * @generated from protobuf field: optional float x2 = 3;
     */
    x2?: number;
    /**
     * @generated from protobuf field: optional float y2 = 4;
     */
    y2?: number; // left-top, right-bottom
}
/**
 * vehicle status of one timestamp
 *
 * @generated from protobuf message ec.interface.BSTVECHILESTATUS
 */
export interface BSTVECHILESTATUS {
    /**
     * @generated from protobuf field: ec.interface.BBOX bbox = 1;
     */
    bbox?: BBOX; // network output
    /**
     * @generated from protobuf field: optional ec.interface.BBOX bboxglobal = 2;
     */
    bboxglobal?: BBOX; // fusion output
    /**
     * @generated from protobuf field: float confidence = 3;
     */
    confidence: number; // network output
    /**
     * @generated from protobuf field: optional float x_offset = 4;
     */
    xOffset?: number;
    /**
     * @generated from protobuf field: repeated ec.interface.CLASSIFICATION classification = 5;
     */
    classification: CLASSIFICATION[]; // network output
    /**
     * @generated from protobuf field: optional float width = 6;
     */
    width?: number; // fusion output
    /**
     * @generated from protobuf field: optional float length = 7;
     */
    length?: number; // fusion output
    /**
     * @generated from protobuf field: optional float height = 8;
     */
    height?: number; // fusion output
    /**
     * @generated from protobuf field: optional float width_var = 9;
     */
    widthVar?: number; // fusion output
    /**
     * @generated from protobuf field: optional float length_var = 10;
     */
    lengthVar?: number; // fusion output
    /**
     * @generated from protobuf field: optional double position_cx = 11;
     */
    positionCx?: number; // fusion output
    /**
     * @generated from protobuf field: optional double position_cy = 12;
     */
    positionCy?: number; // fusion output
    /**
     * @generated from protobuf field: optional float yaw = 13;
     */
    yaw?: number; // fusion output
    /**
     * @generated from protobuf field: optional float yaw_rate = 14;
     */
    yawRate?: number; // fusion output
    /**
     * @generated from protobuf field: optional double velocity_x = 15;
     */
    velocityX?: number; // fusion output
    /**
     * @generated from protobuf field: optional double velocity_y = 16;
     */
    velocityY?: number; // fusion output
    /**
     * @generated from protobuf field: optional double velocity_x_var = 17;
     */
    velocityXVar?: number;
    /**
     * @generated from protobuf field: optional double velocity_y_var = 18;
     */
    velocityYVar?: number;
    /**
     * @generated from protobuf field: optional double acceleration_x = 19;
     */
    accelerationX?: number; // fusion output
    /**
     * @generated from protobuf field: optional double acceleration_y = 20;
     */
    accelerationY?: number; // fusion output
}
/**
 * @generated from protobuf message ec.interface.ROADCVOBJECT
 */
export interface ROADCVOBJECT {
    /**
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number; // network output
    /**
     * @generated from protobuf field: uint64 time_stamp = 2;
     */
    timeStamp: bigint; // sys read input
    /**
     * @generated from protobuf field: ec.interface.BSTVECHILESTATUS status = 3;
     */
    status?: BSTVECHILESTATUS;
}
/**
 * @generated from protobuf message ec.interface.ROADCV_OBJECT_LIST
 */
export interface ROADCV_OBJECT_LIST {
    /**
     * @generated from protobuf field: int32 objectnum = 1;
     */
    objectnum: number; // total number of current detected objects
    /**
     * @generated from protobuf field: optional ec.interface.Header header = 2;
     */
    header?: Header;
    /**
     * @generated from protobuf field: repeated ec.interface.ROADCVOBJECT objectlist = 3;
     */
    objectlist: ROADCVOBJECT[]; // vector of objects
}
/**
 * @generated from protobuf enum ec.interface.ROADOBJECTTYPE
 */
export enum ROADOBJECTTYPE {
    /**
     * @generated from protobuf enum value: BST_TYPE_BICYCLE = 0;
     */
    BST_TYPE_BICYCLE = 0,
    /**
     * @generated from protobuf enum value: BST_TYPE_BUS = 1;
     */
    BST_TYPE_BUS = 1,
    /**
     * @generated from protobuf enum value: BST_TYPE_CAR = 2;
     */
    BST_TYPE_CAR = 2,
    /**
     * @generated from protobuf enum value: BST_TYPE_CARAVAN = 3;
     */
    BST_TYPE_CARAVAN = 3,
    /**
     * @generated from protobuf enum value: BST_TYPE_MOTORCYCLE = 4;
     */
    BST_TYPE_MOTORCYCLE = 4,
    /**
     * @generated from protobuf enum value: BST_TYPE_PEDESTRIAN = 5;
     */
    BST_TYPE_PEDESTRIAN = 5,
    /**
     * @generated from protobuf enum value: BST_TYPE_RIDER = 6;
     */
    BST_TYPE_RIDER = 6,
    /**
     * @generated from protobuf enum value: BST_TYPE_TRUCK = 7;
     */
    BST_TYPE_TRUCK = 7,
    /**
     * @generated from protobuf enum value: BST_TYPE_TRUCKTRAILER = 8;
     */
    BST_TYPE_TRUCKTRAILER = 8,
    /**
     * @generated from protobuf enum value: BST_TYPE_VAN = 9;
     */
    BST_TYPE_VAN = 9,
    /**
     * @generated from protobuf enum value: BST_TYPE_UNKNOWN = 10;
     */
    BST_TYPE_UNKNOWN = 10
}
// @generated message type with reflection information, may provide speed optimized methods
class Header$Type extends MessageType<Header> {
    constructor() {
        super("ec.interface.Header", [
            { no: 1, name: "seq", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "timestamp", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "frame_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Header>): Header {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Header>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Header): Header {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 seq */ 1:
                    message.seq = reader.uint32();
                    break;
                case /* optional uint64 timestamp */ 2:
                    message.timestamp = reader.uint64().toBigInt();
                    break;
                case /* optional string frame_id */ 3:
                    message.frameId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Header, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 seq = 1; */
        if (message.seq !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.seq);
        /* optional uint64 timestamp = 2; */
        if (message.timestamp !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.timestamp);
        /* optional string frame_id = 3; */
        if (message.frameId !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.frameId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ec.interface.Header
 */
export const Header = new Header$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CLASSIFICATION$Type extends MessageType<CLASSIFICATION> {
    constructor() {
        super("ec.interface.CLASSIFICATION", [
            { no: 1, name: "obj_class", kind: "enum", opt: true, T: () => ["ec.interface.ROADOBJECTTYPE", ROADOBJECTTYPE] },
            { no: 2, name: "confidence_class", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<CLASSIFICATION>): CLASSIFICATION {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CLASSIFICATION>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CLASSIFICATION): CLASSIFICATION {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional ec.interface.ROADOBJECTTYPE obj_class */ 1:
                    message.objClass = reader.int32();
                    break;
                case /* optional float confidence_class */ 2:
                    message.confidenceClass = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CLASSIFICATION, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional ec.interface.ROADOBJECTTYPE obj_class = 1; */
        if (message.objClass !== undefined)
            writer.tag(1, WireType.Varint).int32(message.objClass);
        /* optional float confidence_class = 2; */
        if (message.confidenceClass !== undefined)
            writer.tag(2, WireType.Bit32).float(message.confidenceClass);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ec.interface.CLASSIFICATION
 */
export const CLASSIFICATION = new CLASSIFICATION$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BBOX$Type extends MessageType<BBOX> {
    constructor() {
        super("ec.interface.BBOX", [
            { no: 1, name: "x1", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "y1", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "x2", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "y2", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<BBOX>): BBOX {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BBOX>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BBOX): BBOX {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional float x1 */ 1:
                    message.x1 = reader.float();
                    break;
                case /* optional float y1 */ 2:
                    message.y1 = reader.float();
                    break;
                case /* optional float x2 */ 3:
                    message.x2 = reader.float();
                    break;
                case /* optional float y2 */ 4:
                    message.y2 = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BBOX, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional float x1 = 1; */
        if (message.x1 !== undefined)
            writer.tag(1, WireType.Bit32).float(message.x1);
        /* optional float y1 = 2; */
        if (message.y1 !== undefined)
            writer.tag(2, WireType.Bit32).float(message.y1);
        /* optional float x2 = 3; */
        if (message.x2 !== undefined)
            writer.tag(3, WireType.Bit32).float(message.x2);
        /* optional float y2 = 4; */
        if (message.y2 !== undefined)
            writer.tag(4, WireType.Bit32).float(message.y2);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ec.interface.BBOX
 */
export const BBOX = new BBOX$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BSTVECHILESTATUS$Type extends MessageType<BSTVECHILESTATUS> {
    constructor() {
        super("ec.interface.BSTVECHILESTATUS", [
            { no: 1, name: "bbox", kind: "message", T: () => BBOX },
            { no: 2, name: "bboxglobal", kind: "message", T: () => BBOX },
            { no: 3, name: "confidence", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "x_offset", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "classification", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CLASSIFICATION },
            { no: 6, name: "width", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 7, name: "length", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 8, name: "height", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 9, name: "width_var", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 10, name: "length_var", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 11, name: "position_cx", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 12, name: "position_cy", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 13, name: "yaw", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 14, name: "yaw_rate", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 15, name: "velocity_x", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 16, name: "velocity_y", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 17, name: "velocity_x_var", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 18, name: "velocity_y_var", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 19, name: "acceleration_x", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 20, name: "acceleration_y", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<BSTVECHILESTATUS>): BSTVECHILESTATUS {
        const message = { confidence: 0, classification: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BSTVECHILESTATUS>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BSTVECHILESTATUS): BSTVECHILESTATUS {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ec.interface.BBOX bbox */ 1:
                    message.bbox = BBOX.internalBinaryRead(reader, reader.uint32(), options, message.bbox);
                    break;
                case /* optional ec.interface.BBOX bboxglobal */ 2:
                    message.bboxglobal = BBOX.internalBinaryRead(reader, reader.uint32(), options, message.bboxglobal);
                    break;
                case /* float confidence */ 3:
                    message.confidence = reader.float();
                    break;
                case /* optional float x_offset */ 4:
                    message.xOffset = reader.float();
                    break;
                case /* repeated ec.interface.CLASSIFICATION classification */ 5:
                    message.classification.push(CLASSIFICATION.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional float width */ 6:
                    message.width = reader.float();
                    break;
                case /* optional float length */ 7:
                    message.length = reader.float();
                    break;
                case /* optional float height */ 8:
                    message.height = reader.float();
                    break;
                case /* optional float width_var */ 9:
                    message.widthVar = reader.float();
                    break;
                case /* optional float length_var */ 10:
                    message.lengthVar = reader.float();
                    break;
                case /* optional double position_cx */ 11:
                    message.positionCx = reader.double();
                    break;
                case /* optional double position_cy */ 12:
                    message.positionCy = reader.double();
                    break;
                case /* optional float yaw */ 13:
                    message.yaw = reader.float();
                    break;
                case /* optional float yaw_rate */ 14:
                    message.yawRate = reader.float();
                    break;
                case /* optional double velocity_x */ 15:
                    message.velocityX = reader.double();
                    break;
                case /* optional double velocity_y */ 16:
                    message.velocityY = reader.double();
                    break;
                case /* optional double velocity_x_var */ 17:
                    message.velocityXVar = reader.double();
                    break;
                case /* optional double velocity_y_var */ 18:
                    message.velocityYVar = reader.double();
                    break;
                case /* optional double acceleration_x */ 19:
                    message.accelerationX = reader.double();
                    break;
                case /* optional double acceleration_y */ 20:
                    message.accelerationY = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BSTVECHILESTATUS, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ec.interface.BBOX bbox = 1; */
        if (message.bbox)
            BBOX.internalBinaryWrite(message.bbox, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional ec.interface.BBOX bboxglobal = 2; */
        if (message.bboxglobal)
            BBOX.internalBinaryWrite(message.bboxglobal, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* float confidence = 3; */
        if (message.confidence !== 0)
            writer.tag(3, WireType.Bit32).float(message.confidence);
        /* optional float x_offset = 4; */
        if (message.xOffset !== undefined)
            writer.tag(4, WireType.Bit32).float(message.xOffset);
        /* repeated ec.interface.CLASSIFICATION classification = 5; */
        for (let i = 0; i < message.classification.length; i++)
            CLASSIFICATION.internalBinaryWrite(message.classification[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional float width = 6; */
        if (message.width !== undefined)
            writer.tag(6, WireType.Bit32).float(message.width);
        /* optional float length = 7; */
        if (message.length !== undefined)
            writer.tag(7, WireType.Bit32).float(message.length);
        /* optional float height = 8; */
        if (message.height !== undefined)
            writer.tag(8, WireType.Bit32).float(message.height);
        /* optional float width_var = 9; */
        if (message.widthVar !== undefined)
            writer.tag(9, WireType.Bit32).float(message.widthVar);
        /* optional float length_var = 10; */
        if (message.lengthVar !== undefined)
            writer.tag(10, WireType.Bit32).float(message.lengthVar);
        /* optional double position_cx = 11; */
        if (message.positionCx !== undefined)
            writer.tag(11, WireType.Bit64).double(message.positionCx);
        /* optional double position_cy = 12; */
        if (message.positionCy !== undefined)
            writer.tag(12, WireType.Bit64).double(message.positionCy);
        /* optional float yaw = 13; */
        if (message.yaw !== undefined)
            writer.tag(13, WireType.Bit32).float(message.yaw);
        /* optional float yaw_rate = 14; */
        if (message.yawRate !== undefined)
            writer.tag(14, WireType.Bit32).float(message.yawRate);
        /* optional double velocity_x = 15; */
        if (message.velocityX !== undefined)
            writer.tag(15, WireType.Bit64).double(message.velocityX);
        /* optional double velocity_y = 16; */
        if (message.velocityY !== undefined)
            writer.tag(16, WireType.Bit64).double(message.velocityY);
        /* optional double velocity_x_var = 17; */
        if (message.velocityXVar !== undefined)
            writer.tag(17, WireType.Bit64).double(message.velocityXVar);
        /* optional double velocity_y_var = 18; */
        if (message.velocityYVar !== undefined)
            writer.tag(18, WireType.Bit64).double(message.velocityYVar);
        /* optional double acceleration_x = 19; */
        if (message.accelerationX !== undefined)
            writer.tag(19, WireType.Bit64).double(message.accelerationX);
        /* optional double acceleration_y = 20; */
        if (message.accelerationY !== undefined)
            writer.tag(20, WireType.Bit64).double(message.accelerationY);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ec.interface.BSTVECHILESTATUS
 */
export const BSTVECHILESTATUS = new BSTVECHILESTATUS$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ROADCVOBJECT$Type extends MessageType<ROADCVOBJECT> {
    constructor() {
        super("ec.interface.ROADCVOBJECT", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "time_stamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "status", kind: "message", T: () => BSTVECHILESTATUS }
        ]);
    }
    create(value?: PartialMessage<ROADCVOBJECT>): ROADCVOBJECT {
        const message = { id: 0, timeStamp: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ROADCVOBJECT>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ROADCVOBJECT): ROADCVOBJECT {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* uint64 time_stamp */ 2:
                    message.timeStamp = reader.uint64().toBigInt();
                    break;
                case /* ec.interface.BSTVECHILESTATUS status */ 3:
                    message.status = BSTVECHILESTATUS.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ROADCVOBJECT, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* uint64 time_stamp = 2; */
        if (message.timeStamp !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.timeStamp);
        /* ec.interface.BSTVECHILESTATUS status = 3; */
        if (message.status)
            BSTVECHILESTATUS.internalBinaryWrite(message.status, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ec.interface.ROADCVOBJECT
 */
export const ROADCVOBJECT = new ROADCVOBJECT$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ROADCV_OBJECT_LIST$Type extends MessageType<ROADCV_OBJECT_LIST> {
    constructor() {
        super("ec.interface.ROADCV_OBJECT_LIST", [
            { no: 1, name: "objectnum", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "header", kind: "message", T: () => Header },
            { no: 3, name: "objectlist", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ROADCVOBJECT }
        ]);
    }
    create(value?: PartialMessage<ROADCV_OBJECT_LIST>): ROADCV_OBJECT_LIST {
        const message = { objectnum: 0, objectlist: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ROADCV_OBJECT_LIST>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ROADCV_OBJECT_LIST): ROADCV_OBJECT_LIST {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 objectnum */ 1:
                    message.objectnum = reader.int32();
                    break;
                case /* optional ec.interface.Header header */ 2:
                    message.header = Header.internalBinaryRead(reader, reader.uint32(), options, message.header);
                    break;
                case /* repeated ec.interface.ROADCVOBJECT objectlist */ 3:
                    message.objectlist.push(ROADCVOBJECT.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ROADCV_OBJECT_LIST, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 objectnum = 1; */
        if (message.objectnum !== 0)
            writer.tag(1, WireType.Varint).int32(message.objectnum);
        /* optional ec.interface.Header header = 2; */
        if (message.header)
            Header.internalBinaryWrite(message.header, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated ec.interface.ROADCVOBJECT objectlist = 3; */
        for (let i = 0; i < message.objectlist.length; i++)
            ROADCVOBJECT.internalBinaryWrite(message.objectlist[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ec.interface.ROADCV_OBJECT_LIST
 */
export const ROADCV_OBJECT_LIST = new ROADCV_OBJECT_LIST$Type();
