// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "DisplayImage.proto" (package "autoplt.display.image", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message autoplt.display.image.DisplayImage
 */
export interface DisplayImage {
    /**
     * @generated from protobuf field: optional uint32 height = 1;
     */
    height?: number; // image height, that is, number of rows
    /**
     * @generated from protobuf field: optional uint32 width = 2;
     */
    width?: number; // image width, that is, number of columns
    /**
     * @generated from protobuf field: optional uint32 channelid = 3;
     */
    channelid?: number;
    /**
     * @generated from protobuf field: optional string pixformat = 4;
     */
    pixformat?: string;
    /**
     * @generated from protobuf field: optional uint32 step = 5;
     */
    step?: number; // Full row length in bytes
    /**
     * @generated from protobuf field: optional bytes data = 6;
     */
    data?: Uint8Array; // actual matrix data, size is (step * rows)
}
// @generated message type with reflection information, may provide speed optimized methods
class DisplayImage$Type extends MessageType<DisplayImage> {
    constructor() {
        super("autoplt.display.image.DisplayImage", [
            { no: 1, name: "height", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "width", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "channelid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "pixformat", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "step", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "data", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<DisplayImage>): DisplayImage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DisplayImage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DisplayImage): DisplayImage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 height */ 1:
                    message.height = reader.uint32();
                    break;
                case /* optional uint32 width */ 2:
                    message.width = reader.uint32();
                    break;
                case /* optional uint32 channelid */ 3:
                    message.channelid = reader.uint32();
                    break;
                case /* optional string pixformat */ 4:
                    message.pixformat = reader.string();
                    break;
                case /* optional uint32 step */ 5:
                    message.step = reader.uint32();
                    break;
                case /* optional bytes data */ 6:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DisplayImage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 height = 1; */
        if (message.height !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.height);
        /* optional uint32 width = 2; */
        if (message.width !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.width);
        /* optional uint32 channelid = 3; */
        if (message.channelid !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.channelid);
        /* optional string pixformat = 4; */
        if (message.pixformat !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.pixformat);
        /* optional uint32 step = 5; */
        if (message.step !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.step);
        /* optional bytes data = 6; */
        if (message.data !== undefined)
            writer.tag(6, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message autoplt.display.image.DisplayImage
 */
export const DisplayImage = new DisplayImage$Type();
