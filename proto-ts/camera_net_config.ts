// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "camera_net_config.proto" (package "ec.camera_net_config", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ec.camera_net_config.CameraConfig
 */
export interface CameraConfig {
    /**
     * @generated from protobuf field: optional uint32 group_id = 1;
     */
    groupId?: number;
    /**
     * @generated from protobuf field: optional uint32 camera_id = 2;
     */
    cameraId?: number;
    /**
     * @generated from protobuf field: optional string shared_config_file = 3;
     */
    sharedConfigFile?: string;
    /**
     * to3d parameters
     *
     * @generated from protobuf field: optional int32 stright_x1 = 74;
     */
    strightX1?: number;
    /**
     * @generated from protobuf field: optional int32 stright_y1 = 75;
     */
    strightY1?: number;
    /**
     * @generated from protobuf field: optional int32 stright_x2 = 76;
     */
    strightX2?: number;
    /**
     * @generated from protobuf field: optional int32 stright_y2 = 77;
     */
    strightY2?: number;
    /**
     * @generated from protobuf field: optional string main_camera_calib = 6;
     */
    mainCameraCalib?: string;
    /**
     * @generated from protobuf field: optional string tele2wide_calib = 7 [json_name = "tele2wideCalib"];
     */
    tele2WideCalib?: string;
    /**
     * @generated from protobuf field: optional string calib_img = 10;
     */
    calibImg?: string;
}
/**
 * @generated from protobuf message ec.camera_net_config.SGNodeConfig
 */
export interface SGNodeConfig {
    /**
     * recieved image size
     *
     * @generated from protobuf field: optional int32 img_width = 5;
     */
    imgWidth?: number;
    /**
     * @generated from protobuf field: optional int32 img_height = 6;
     */
    imgHeight?: number;
    /**
     * net input size
     *
     * @generated from protobuf field: optional int32 net_width = 7;
     */
    netWidth?: number;
    /**
     * @generated from protobuf field: optional int32 net_height = 8;
     */
    netHeight?: number;
    /**
     * license plate model input size
     *
     * @generated from protobuf field: optional int32 plate_width = 11;
     */
    plateWidth?: number;
    /**
     * @generated from protobuf field: optional int32 plate_height = 12;
     */
    plateHeight?: number;
    /**
     * net model path
     *
     * @generated from protobuf field: optional string npu_model_path = 15;
     */
    npuModelPath?: string;
    /**
     * @generated from protobuf field: optional string dsp_model_path = 16;
     */
    dspModelPath?: string;
    /**
     * for save result
     *
     * @generated from protobuf field: optional bool need_save_result = 17;
     */
    needSaveResult?: boolean;
    /**
     * @generated from protobuf field: optional string save_dir = 18;
     */
    saveDir?: string;
    /**
     * @generated from protobuf field: optional ec.camera_net_config.SGNodeConfig.LogLevel loglevel = 22;
     */
    loglevel?: SGNodeConfig_LogLevel;
    /**
     * @generated from protobuf field: optional string logpath = 23;
     */
    logpath?: string;
    /**
     * @generated from protobuf field: optional string app_name = 24;
     */
    appName?: string;
    /**
     *
     *
     * @generated from protobuf field: optional bool need_3dbox = 34 [json_name = "need3dbox"];
     */
    need3Dbox?: boolean;
    /**
     * @generated from protobuf field: optional bool need_obj_log = 36;
     */
    needObjLog?: boolean;
    /**
     * net parameters
     *
     * @generated from protobuf field: optional float cls_threshold = 40;
     */
    clsThreshold?: number;
    /**
     * @generated from protobuf field: optional float nms_threshold = 41;
     */
    nmsThreshold?: number;
    /**
     * @generated from protobuf field: optional bool use_roi = 42;
     */
    useRoi?: boolean;
    /**
     * @generated from protobuf field: optional string roi_file = 43;
     */
    roiFile?: string;
    /**
     * plate parameters
     *
     * @generated from protobuf field: optional float plate_threshold = 44;
     */
    plateThreshold?: number;
    /**
     * tracker parameters
     *
     * @generated from protobuf field: optional int32 track_max_age = 50;
     */
    trackMaxAge?: number;
    /**
     * @generated from protobuf field: optional uint32 max_frame_diff = 51;
     */
    maxFrameDiff?: number;
    /**
     * @generated from protobuf field: optional bool along_y = 52;
     */
    alongY?: boolean;
    /**
     * @generated from protobuf field: optional bool use_realworld = 53;
     */
    useRealworld?: boolean;
    /**
     * @generated from protobuf field: optional bool use_vel_filter = 54;
     */
    useVelFilter?: boolean;
    /**
     * @generated from protobuf field: optional float vel_scale = 55;
     */
    velScale?: number;
    // fusion parameters

    /**
     * @generated from protobuf field: optional string display_conf_path = 81;
     */
    displayConfPath?: string;
    /**
     * channels
     *
     * @generated from protobuf field: optional string net_obj_channel = 200;
     */
    netObjChannel?: string;
    /**
     * @generated from protobuf field: optional string plate_channel = 203;
     */
    plateChannel?: string;
    /**
     * @generated from protobuf field: optional string track_channel = 206;
     */
    trackChannel?: string;
    /**
     * @generated from protobuf field: optional string cvfusion_channel = 210;
     */
    cvfusionChannel?: string;
    /**
     * @generated from protobuf field: optional string diplay_channel = 211;
     */
    diplayChannel?: string;
    /**
     * @generated from protobuf field: optional string recv_channel = 212;
     */
    recvChannel?: string;
    /**
     * @generated from protobuf field: optional string recv_conf_path = 213;
     */
    recvConfPath?: string;
    /**
     * @generated from protobuf field: optional bool use_mipi = 214;
     */
    useMipi?: boolean;
    /**
     * @generated from protobuf field: optional bool use_plate = 215;
     */
    usePlate?: boolean;
}
/**
 * @generated from protobuf enum ec.camera_net_config.SGNodeConfig.LogLevel
 */
export enum SGNodeConfig_LogLevel {
    /**
     * @generated from protobuf enum value: LOGLEVEL_START = 0;
     */
    LOGLEVEL_START = 0,
    /**
     * @generated from protobuf enum value: FETAL = 1;
     */
    FETAL = 1,
    /**
     * @generated from protobuf enum value: ERROR = 2;
     */
    ERROR = 2,
    /**
     * @generated from protobuf enum value: WARNING = 3;
     */
    WARNING = 3,
    /**
     * @generated from protobuf enum value: NOTICE = 4;
     */
    NOTICE = 4,
    /**
     * @generated from protobuf enum value: DEBUG = 5;
     */
    DEBUG = 5,
    /**
     * @generated from protobuf enum value: LOGLEVEL_END = 6;
     */
    LOGLEVEL_END = 6
}
// @generated message type with reflection information, may provide speed optimized methods
class CameraConfig$Type extends MessageType<CameraConfig> {
    constructor() {
        super("ec.camera_net_config.CameraConfig", [
            { no: 1, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "camera_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "shared_config_file", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 74, name: "stright_x1", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 75, name: "stright_y1", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 76, name: "stright_x2", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 77, name: "stright_y2", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "main_camera_calib", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "tele2wide_calib", kind: "scalar", jsonName: "tele2wideCalib", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "calib_img", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CameraConfig>): CameraConfig {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CameraConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CameraConfig): CameraConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 group_id */ 1:
                    message.groupId = reader.uint32();
                    break;
                case /* optional uint32 camera_id */ 2:
                    message.cameraId = reader.uint32();
                    break;
                case /* optional string shared_config_file */ 3:
                    message.sharedConfigFile = reader.string();
                    break;
                case /* optional int32 stright_x1 */ 74:
                    message.strightX1 = reader.int32();
                    break;
                case /* optional int32 stright_y1 */ 75:
                    message.strightY1 = reader.int32();
                    break;
                case /* optional int32 stright_x2 */ 76:
                    message.strightX2 = reader.int32();
                    break;
                case /* optional int32 stright_y2 */ 77:
                    message.strightY2 = reader.int32();
                    break;
                case /* optional string main_camera_calib */ 6:
                    message.mainCameraCalib = reader.string();
                    break;
                case /* optional string tele2wide_calib = 7 [json_name = "tele2wideCalib"];*/ 7:
                    message.tele2WideCalib = reader.string();
                    break;
                case /* optional string calib_img */ 10:
                    message.calibImg = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CameraConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 group_id = 1; */
        if (message.groupId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.groupId);
        /* optional uint32 camera_id = 2; */
        if (message.cameraId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.cameraId);
        /* optional string shared_config_file = 3; */
        if (message.sharedConfigFile !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.sharedConfigFile);
        /* optional int32 stright_x1 = 74; */
        if (message.strightX1 !== undefined)
            writer.tag(74, WireType.Varint).int32(message.strightX1);
        /* optional int32 stright_y1 = 75; */
        if (message.strightY1 !== undefined)
            writer.tag(75, WireType.Varint).int32(message.strightY1);
        /* optional int32 stright_x2 = 76; */
        if (message.strightX2 !== undefined)
            writer.tag(76, WireType.Varint).int32(message.strightX2);
        /* optional int32 stright_y2 = 77; */
        if (message.strightY2 !== undefined)
            writer.tag(77, WireType.Varint).int32(message.strightY2);
        /* optional string main_camera_calib = 6; */
        if (message.mainCameraCalib !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.mainCameraCalib);
        /* optional string tele2wide_calib = 7 [json_name = "tele2wideCalib"]; */
        if (message.tele2WideCalib !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.tele2WideCalib);
        /* optional string calib_img = 10; */
        if (message.calibImg !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.calibImg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ec.camera_net_config.CameraConfig
 */
export const CameraConfig = new CameraConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SGNodeConfig$Type extends MessageType<SGNodeConfig> {
    constructor() {
        super("ec.camera_net_config.SGNodeConfig", [
            { no: 5, name: "img_width", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "img_height", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "net_width", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "net_height", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "plate_width", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "plate_height", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "npu_model_path", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "dsp_model_path", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "need_save_result", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 18, name: "save_dir", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 22, name: "loglevel", kind: "enum", opt: true, T: () => ["ec.camera_net_config.SGNodeConfig.LogLevel", SGNodeConfig_LogLevel] },
            { no: 23, name: "logpath", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 24, name: "app_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 34, name: "need_3dbox", kind: "scalar", jsonName: "need3dbox", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 36, name: "need_obj_log", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 40, name: "cls_threshold", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 41, name: "nms_threshold", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 42, name: "use_roi", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 43, name: "roi_file", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 44, name: "plate_threshold", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 50, name: "track_max_age", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 51, name: "max_frame_diff", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 52, name: "along_y", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 53, name: "use_realworld", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 54, name: "use_vel_filter", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 55, name: "vel_scale", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 81, name: "display_conf_path", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 200, name: "net_obj_channel", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 203, name: "plate_channel", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 206, name: "track_channel", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 210, name: "cvfusion_channel", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 211, name: "diplay_channel", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 212, name: "recv_channel", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 213, name: "recv_conf_path", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 214, name: "use_mipi", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 215, name: "use_plate", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SGNodeConfig>): SGNodeConfig {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SGNodeConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SGNodeConfig): SGNodeConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 img_width */ 5:
                    message.imgWidth = reader.int32();
                    break;
                case /* optional int32 img_height */ 6:
                    message.imgHeight = reader.int32();
                    break;
                case /* optional int32 net_width */ 7:
                    message.netWidth = reader.int32();
                    break;
                case /* optional int32 net_height */ 8:
                    message.netHeight = reader.int32();
                    break;
                case /* optional int32 plate_width */ 11:
                    message.plateWidth = reader.int32();
                    break;
                case /* optional int32 plate_height */ 12:
                    message.plateHeight = reader.int32();
                    break;
                case /* optional string npu_model_path */ 15:
                    message.npuModelPath = reader.string();
                    break;
                case /* optional string dsp_model_path */ 16:
                    message.dspModelPath = reader.string();
                    break;
                case /* optional bool need_save_result */ 17:
                    message.needSaveResult = reader.bool();
                    break;
                case /* optional string save_dir */ 18:
                    message.saveDir = reader.string();
                    break;
                case /* optional ec.camera_net_config.SGNodeConfig.LogLevel loglevel */ 22:
                    message.loglevel = reader.int32();
                    break;
                case /* optional string logpath */ 23:
                    message.logpath = reader.string();
                    break;
                case /* optional string app_name */ 24:
                    message.appName = reader.string();
                    break;
                case /* optional bool need_3dbox = 34 [json_name = "need3dbox"];*/ 34:
                    message.need3Dbox = reader.bool();
                    break;
                case /* optional bool need_obj_log */ 36:
                    message.needObjLog = reader.bool();
                    break;
                case /* optional float cls_threshold */ 40:
                    message.clsThreshold = reader.float();
                    break;
                case /* optional float nms_threshold */ 41:
                    message.nmsThreshold = reader.float();
                    break;
                case /* optional bool use_roi */ 42:
                    message.useRoi = reader.bool();
                    break;
                case /* optional string roi_file */ 43:
                    message.roiFile = reader.string();
                    break;
                case /* optional float plate_threshold */ 44:
                    message.plateThreshold = reader.float();
                    break;
                case /* optional int32 track_max_age */ 50:
                    message.trackMaxAge = reader.int32();
                    break;
                case /* optional uint32 max_frame_diff */ 51:
                    message.maxFrameDiff = reader.uint32();
                    break;
                case /* optional bool along_y */ 52:
                    message.alongY = reader.bool();
                    break;
                case /* optional bool use_realworld */ 53:
                    message.useRealworld = reader.bool();
                    break;
                case /* optional bool use_vel_filter */ 54:
                    message.useVelFilter = reader.bool();
                    break;
                case /* optional float vel_scale */ 55:
                    message.velScale = reader.float();
                    break;
                case /* optional string display_conf_path */ 81:
                    message.displayConfPath = reader.string();
                    break;
                case /* optional string net_obj_channel */ 200:
                    message.netObjChannel = reader.string();
                    break;
                case /* optional string plate_channel */ 203:
                    message.plateChannel = reader.string();
                    break;
                case /* optional string track_channel */ 206:
                    message.trackChannel = reader.string();
                    break;
                case /* optional string cvfusion_channel */ 210:
                    message.cvfusionChannel = reader.string();
                    break;
                case /* optional string diplay_channel */ 211:
                    message.diplayChannel = reader.string();
                    break;
                case /* optional string recv_channel */ 212:
                    message.recvChannel = reader.string();
                    break;
                case /* optional string recv_conf_path */ 213:
                    message.recvConfPath = reader.string();
                    break;
                case /* optional bool use_mipi */ 214:
                    message.useMipi = reader.bool();
                    break;
                case /* optional bool use_plate */ 215:
                    message.usePlate = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SGNodeConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 img_width = 5; */
        if (message.imgWidth !== undefined)
            writer.tag(5, WireType.Varint).int32(message.imgWidth);
        /* optional int32 img_height = 6; */
        if (message.imgHeight !== undefined)
            writer.tag(6, WireType.Varint).int32(message.imgHeight);
        /* optional int32 net_width = 7; */
        if (message.netWidth !== undefined)
            writer.tag(7, WireType.Varint).int32(message.netWidth);
        /* optional int32 net_height = 8; */
        if (message.netHeight !== undefined)
            writer.tag(8, WireType.Varint).int32(message.netHeight);
        /* optional int32 plate_width = 11; */
        if (message.plateWidth !== undefined)
            writer.tag(11, WireType.Varint).int32(message.plateWidth);
        /* optional int32 plate_height = 12; */
        if (message.plateHeight !== undefined)
            writer.tag(12, WireType.Varint).int32(message.plateHeight);
        /* optional string npu_model_path = 15; */
        if (message.npuModelPath !== undefined)
            writer.tag(15, WireType.LengthDelimited).string(message.npuModelPath);
        /* optional string dsp_model_path = 16; */
        if (message.dspModelPath !== undefined)
            writer.tag(16, WireType.LengthDelimited).string(message.dspModelPath);
        /* optional bool need_save_result = 17; */
        if (message.needSaveResult !== undefined)
            writer.tag(17, WireType.Varint).bool(message.needSaveResult);
        /* optional string save_dir = 18; */
        if (message.saveDir !== undefined)
            writer.tag(18, WireType.LengthDelimited).string(message.saveDir);
        /* optional ec.camera_net_config.SGNodeConfig.LogLevel loglevel = 22; */
        if (message.loglevel !== undefined)
            writer.tag(22, WireType.Varint).int32(message.loglevel);
        /* optional string logpath = 23; */
        if (message.logpath !== undefined)
            writer.tag(23, WireType.LengthDelimited).string(message.logpath);
        /* optional string app_name = 24; */
        if (message.appName !== undefined)
            writer.tag(24, WireType.LengthDelimited).string(message.appName);
        /* optional bool need_3dbox = 34 [json_name = "need3dbox"]; */
        if (message.need3Dbox !== undefined)
            writer.tag(34, WireType.Varint).bool(message.need3Dbox);
        /* optional bool need_obj_log = 36; */
        if (message.needObjLog !== undefined)
            writer.tag(36, WireType.Varint).bool(message.needObjLog);
        /* optional float cls_threshold = 40; */
        if (message.clsThreshold !== undefined)
            writer.tag(40, WireType.Bit32).float(message.clsThreshold);
        /* optional float nms_threshold = 41; */
        if (message.nmsThreshold !== undefined)
            writer.tag(41, WireType.Bit32).float(message.nmsThreshold);
        /* optional bool use_roi = 42; */
        if (message.useRoi !== undefined)
            writer.tag(42, WireType.Varint).bool(message.useRoi);
        /* optional string roi_file = 43; */
        if (message.roiFile !== undefined)
            writer.tag(43, WireType.LengthDelimited).string(message.roiFile);
        /* optional float plate_threshold = 44; */
        if (message.plateThreshold !== undefined)
            writer.tag(44, WireType.Bit32).float(message.plateThreshold);
        /* optional int32 track_max_age = 50; */
        if (message.trackMaxAge !== undefined)
            writer.tag(50, WireType.Varint).int32(message.trackMaxAge);
        /* optional uint32 max_frame_diff = 51; */
        if (message.maxFrameDiff !== undefined)
            writer.tag(51, WireType.Varint).uint32(message.maxFrameDiff);
        /* optional bool along_y = 52; */
        if (message.alongY !== undefined)
            writer.tag(52, WireType.Varint).bool(message.alongY);
        /* optional bool use_realworld = 53; */
        if (message.useRealworld !== undefined)
            writer.tag(53, WireType.Varint).bool(message.useRealworld);
        /* optional bool use_vel_filter = 54; */
        if (message.useVelFilter !== undefined)
            writer.tag(54, WireType.Varint).bool(message.useVelFilter);
        /* optional float vel_scale = 55; */
        if (message.velScale !== undefined)
            writer.tag(55, WireType.Bit32).float(message.velScale);
        /* optional string display_conf_path = 81; */
        if (message.displayConfPath !== undefined)
            writer.tag(81, WireType.LengthDelimited).string(message.displayConfPath);
        /* optional string net_obj_channel = 200; */
        if (message.netObjChannel !== undefined)
            writer.tag(200, WireType.LengthDelimited).string(message.netObjChannel);
        /* optional string plate_channel = 203; */
        if (message.plateChannel !== undefined)
            writer.tag(203, WireType.LengthDelimited).string(message.plateChannel);
        /* optional string track_channel = 206; */
        if (message.trackChannel !== undefined)
            writer.tag(206, WireType.LengthDelimited).string(message.trackChannel);
        /* optional string cvfusion_channel = 210; */
        if (message.cvfusionChannel !== undefined)
            writer.tag(210, WireType.LengthDelimited).string(message.cvfusionChannel);
        /* optional string diplay_channel = 211; */
        if (message.diplayChannel !== undefined)
            writer.tag(211, WireType.LengthDelimited).string(message.diplayChannel);
        /* optional string recv_channel = 212; */
        if (message.recvChannel !== undefined)
            writer.tag(212, WireType.LengthDelimited).string(message.recvChannel);
        /* optional string recv_conf_path = 213; */
        if (message.recvConfPath !== undefined)
            writer.tag(213, WireType.LengthDelimited).string(message.recvConfPath);
        /* optional bool use_mipi = 214; */
        if (message.useMipi !== undefined)
            writer.tag(214, WireType.Varint).bool(message.useMipi);
        /* optional bool use_plate = 215; */
        if (message.usePlate !== undefined)
            writer.tag(215, WireType.Varint).bool(message.usePlate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ec.camera_net_config.SGNodeConfig
 */
export const SGNodeConfig = new SGNodeConfig$Type();
