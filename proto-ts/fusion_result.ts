// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "fusion_result.proto" (package "ec.fusion", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { FusionObjects } from "./fusion_objects";
/**
 * @generated from protobuf message ec.fusion.FusionSensors
 */
export interface FusionSensors {
    /**
     * @generated from protobuf field: optional string sensor_id = 1;
     */
    sensorId?: string; // 传感器ID
    /**
     * @generated from protobuf field: optional uint64 timestamp = 2;
     */
    timestamp?: bigint; // 消息的时间戳
}
/**
 * @generated from protobuf message ec.fusion.FusionResult
 */
export interface FusionResult {
    /**
     * @generated from protobuf field: repeated autoplt.fusion.FusionObjects sensorobjects = 1;
     */
    sensorobjects: FusionObjects[];
    /**
     * @generated from protobuf field: optional autoplt.fusion.FusionObjects fusionobject = 2;
     */
    fusionobject?: FusionObjects;
    /**
     * @generated from protobuf field: repeated ec.fusion.FusionSensors fusion_sensor = 3;
     */
    fusionSensor: FusionSensors[];
}
// @generated message type with reflection information, may provide speed optimized methods
class FusionSensors$Type extends MessageType<FusionSensors> {
    constructor() {
        super("ec.fusion.FusionSensors", [
            { no: 1, name: "sensor_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "timestamp", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<FusionSensors>): FusionSensors {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FusionSensors>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FusionSensors): FusionSensors {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string sensor_id */ 1:
                    message.sensorId = reader.string();
                    break;
                case /* optional uint64 timestamp */ 2:
                    message.timestamp = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FusionSensors, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string sensor_id = 1; */
        if (message.sensorId !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.sensorId);
        /* optional uint64 timestamp = 2; */
        if (message.timestamp !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ec.fusion.FusionSensors
 */
export const FusionSensors = new FusionSensors$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FusionResult$Type extends MessageType<FusionResult> {
    constructor() {
        super("ec.fusion.FusionResult", [
            { no: 1, name: "sensorobjects", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => FusionObjects },
            { no: 2, name: "fusionobject", kind: "message", T: () => FusionObjects },
            { no: 3, name: "fusion_sensor", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => FusionSensors }
        ]);
    }
    create(value?: PartialMessage<FusionResult>): FusionResult {
        const message = { sensorobjects: [], fusionSensor: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FusionResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FusionResult): FusionResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated autoplt.fusion.FusionObjects sensorobjects */ 1:
                    message.sensorobjects.push(FusionObjects.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional autoplt.fusion.FusionObjects fusionobject */ 2:
                    message.fusionobject = FusionObjects.internalBinaryRead(reader, reader.uint32(), options, message.fusionobject);
                    break;
                case /* repeated ec.fusion.FusionSensors fusion_sensor */ 3:
                    message.fusionSensor.push(FusionSensors.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FusionResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated autoplt.fusion.FusionObjects sensorobjects = 1; */
        for (let i = 0; i < message.sensorobjects.length; i++)
            FusionObjects.internalBinaryWrite(message.sensorobjects[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional autoplt.fusion.FusionObjects fusionobject = 2; */
        if (message.fusionobject)
            FusionObjects.internalBinaryWrite(message.fusionobject, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated ec.fusion.FusionSensors fusion_sensor = 3; */
        for (let i = 0; i < message.fusionSensor.length; i++)
            FusionSensors.internalBinaryWrite(message.fusionSensor[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ec.fusion.FusionResult
 */
export const FusionResult = new FusionResult$Type();
