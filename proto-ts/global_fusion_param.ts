// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "global_fusion_param.proto" (package "autoplt.global_fusion_param", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message autoplt.global_fusion_param.SensorFusionParam
 */
export interface SensorFusionParam {
    /**
     * @generated from protobuf field: string sensor_id = 1;
     */
    sensorId: string;
    /**
     * @generated from protobuf field: repeated float translation = 2;
     */
    translation: number[];
    /**
     * @generated from protobuf field: repeated float quaterniond = 3;
     */
    quaterniond: number[];
    /**
     * @generated from protobuf field: repeated float pos_covariance = 4;
     */
    posCovariance: number[];
    /**
     * @generated from protobuf field: repeated float vel_covariance = 5;
     */
    velCovariance: number[];
    /**
     * @generated from protobuf field: repeated float acc_covariance = 6;
     */
    accCovariance: number[];
}
/**
 * @generated from protobuf message autoplt.global_fusion_param.GlobalFusionParam
 */
export interface GlobalFusionParam {
    /**
     * @generated from protobuf field: repeated autoplt.global_fusion_param.SensorFusionParam fusion_sensors_param = 1;
     */
    fusionSensorsParam: SensorFusionParam[];
}
// @generated message type with reflection information, may provide speed optimized methods
class SensorFusionParam$Type extends MessageType<SensorFusionParam> {
    constructor() {
        super("autoplt.global_fusion_param.SensorFusionParam", [
            { no: 1, name: "sensor_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "translation", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "quaterniond", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "pos_covariance", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "vel_covariance", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "acc_covariance", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<SensorFusionParam>): SensorFusionParam {
        const message = { sensorId: "", translation: [], quaterniond: [], posCovariance: [], velCovariance: [], accCovariance: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SensorFusionParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SensorFusionParam): SensorFusionParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sensor_id */ 1:
                    message.sensorId = reader.string();
                    break;
                case /* repeated float translation */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.translation.push(reader.float());
                    else
                        message.translation.push(reader.float());
                    break;
                case /* repeated float quaterniond */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.quaterniond.push(reader.float());
                    else
                        message.quaterniond.push(reader.float());
                    break;
                case /* repeated float pos_covariance */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.posCovariance.push(reader.float());
                    else
                        message.posCovariance.push(reader.float());
                    break;
                case /* repeated float vel_covariance */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.velCovariance.push(reader.float());
                    else
                        message.velCovariance.push(reader.float());
                    break;
                case /* repeated float acc_covariance */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.accCovariance.push(reader.float());
                    else
                        message.accCovariance.push(reader.float());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SensorFusionParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sensor_id = 1; */
        if (message.sensorId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sensorId);
        /* repeated float translation = 2; */
        for (let i = 0; i < message.translation.length; i++)
            writer.tag(2, WireType.Bit32).float(message.translation[i]);
        /* repeated float quaterniond = 3; */
        for (let i = 0; i < message.quaterniond.length; i++)
            writer.tag(3, WireType.Bit32).float(message.quaterniond[i]);
        /* repeated float pos_covariance = 4; */
        for (let i = 0; i < message.posCovariance.length; i++)
            writer.tag(4, WireType.Bit32).float(message.posCovariance[i]);
        /* repeated float vel_covariance = 5; */
        for (let i = 0; i < message.velCovariance.length; i++)
            writer.tag(5, WireType.Bit32).float(message.velCovariance[i]);
        /* repeated float acc_covariance = 6; */
        for (let i = 0; i < message.accCovariance.length; i++)
            writer.tag(6, WireType.Bit32).float(message.accCovariance[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message autoplt.global_fusion_param.SensorFusionParam
 */
export const SensorFusionParam = new SensorFusionParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GlobalFusionParam$Type extends MessageType<GlobalFusionParam> {
    constructor() {
        super("autoplt.global_fusion_param.GlobalFusionParam", [
            { no: 1, name: "fusion_sensors_param", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SensorFusionParam }
        ]);
    }
    create(value?: PartialMessage<GlobalFusionParam>): GlobalFusionParam {
        const message = { fusionSensorsParam: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GlobalFusionParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GlobalFusionParam): GlobalFusionParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated autoplt.global_fusion_param.SensorFusionParam fusion_sensors_param */ 1:
                    message.fusionSensorsParam.push(SensorFusionParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GlobalFusionParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated autoplt.global_fusion_param.SensorFusionParam fusion_sensors_param = 1; */
        for (let i = 0; i < message.fusionSensorsParam.length; i++)
            SensorFusionParam.internalBinaryWrite(message.fusionSensorsParam[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message autoplt.global_fusion_param.GlobalFusionParam
 */
export const GlobalFusionParam = new GlobalFusionParam$Type();
