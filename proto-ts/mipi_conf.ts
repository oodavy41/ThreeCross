// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "mipi_conf.proto" (package "ec.mipi", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ec.mipi.Conf
 */
export interface Conf {
    /**
     * @generated from protobuf field: optional bool data_img = 1;
     */
    dataImg?: boolean;
    /**
     * @generated from protobuf field: optional string ec_img_channel = 2;
     */
    ecImgChannel?: string;
    /**
     * @generated from protobuf field: optional string record_img_channel = 3;
     */
    recordImgChannel?: string;
    /**
     * @generated from protobuf field: optional bool compress = 4;
     */
    compress?: boolean;
    /**
     * @generated from protobuf field: optional bool ros_img_raw = 5;
     */
    rosImgRaw?: boolean;
    /**
     * @generated from protobuf field: optional bool ros_img_compress = 6;
     */
    rosImgCompress?: boolean;
    /**
     * @generated from protobuf field: optional string logpath = 7;
     */
    logpath?: string;
    /**
     * @generated from protobuf field: optional ec.mipi.LogLevel loglevel = 8;
     */
    loglevel?: LogLevel;
    /**
     * @generated from protobuf field: optional bool camera8 = 9;
     */
    camera8?: boolean;
    /**
     * @generated from protobuf field: optional bool camera9 = 10;
     */
    camera9?: boolean;
    /**
     * @generated from protobuf field: optional bool camera10 = 11;
     */
    camera10?: boolean;
    /**
     * @generated from protobuf field: optional bool camera11 = 12;
     */
    camera11?: boolean;
    /**
     * @generated from protobuf field: optional int32 image_width = 13;
     */
    imageWidth?: number;
    /**
     * @generated from protobuf field: optional int32 image_height = 14;
     */
    imageHeight?: number;
    /**
     * @generated from protobuf field: optional int32 view_index = 15;
     */
    viewIndex?: number;
    /**
     * @generated from protobuf field: optional int32 view_type = 16;
     */
    viewType?: number;
    /**
     * @generated from protobuf field: optional int32 camera_num = 17;
     */
    cameraNum?: number;
    /**
     * @generated from protobuf field: optional int32 scale_width = 18;
     */
    scaleWidth?: number;
    /**
     * @generated from protobuf field: optional int32 scale_height = 19;
     */
    scaleHeight?: number;
}
/**
 * @generated from protobuf enum ec.mipi.LogLevel
 */
export enum LogLevel {
    /**
     * @generated from protobuf enum value: LOGLEVEL_START = 0;
     */
    LOGLEVEL_START = 0,
    /**
     * @generated from protobuf enum value: FETAL = 1;
     */
    FETAL = 1,
    /**
     * @generated from protobuf enum value: ERROR = 2;
     */
    ERROR = 2,
    /**
     * @generated from protobuf enum value: WARNING = 3;
     */
    WARNING = 3,
    /**
     * @generated from protobuf enum value: NOTICE = 4;
     */
    NOTICE = 4,
    /**
     * @generated from protobuf enum value: DEBUG = 5;
     */
    DEBUG = 5,
    /**
     * @generated from protobuf enum value: LOGLEVEL_END = 6;
     */
    LOGLEVEL_END = 6
}
// @generated message type with reflection information, may provide speed optimized methods
class Conf$Type extends MessageType<Conf> {
    constructor() {
        super("ec.mipi.Conf", [
            { no: 1, name: "data_img", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "ec_img_channel", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "record_img_channel", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "compress", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "ros_img_raw", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "ros_img_compress", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "logpath", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "loglevel", kind: "enum", opt: true, T: () => ["ec.mipi.LogLevel", LogLevel] },
            { no: 9, name: "camera8", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "camera9", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "camera10", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "camera11", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "image_width", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "image_height", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "view_index", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 16, name: "view_type", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 17, name: "camera_num", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 18, name: "scale_width", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 19, name: "scale_height", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Conf>): Conf {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Conf>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Conf): Conf {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool data_img */ 1:
                    message.dataImg = reader.bool();
                    break;
                case /* optional string ec_img_channel */ 2:
                    message.ecImgChannel = reader.string();
                    break;
                case /* optional string record_img_channel */ 3:
                    message.recordImgChannel = reader.string();
                    break;
                case /* optional bool compress */ 4:
                    message.compress = reader.bool();
                    break;
                case /* optional bool ros_img_raw */ 5:
                    message.rosImgRaw = reader.bool();
                    break;
                case /* optional bool ros_img_compress */ 6:
                    message.rosImgCompress = reader.bool();
                    break;
                case /* optional string logpath */ 7:
                    message.logpath = reader.string();
                    break;
                case /* optional ec.mipi.LogLevel loglevel */ 8:
                    message.loglevel = reader.int32();
                    break;
                case /* optional bool camera8 */ 9:
                    message.camera8 = reader.bool();
                    break;
                case /* optional bool camera9 */ 10:
                    message.camera9 = reader.bool();
                    break;
                case /* optional bool camera10 */ 11:
                    message.camera10 = reader.bool();
                    break;
                case /* optional bool camera11 */ 12:
                    message.camera11 = reader.bool();
                    break;
                case /* optional int32 image_width */ 13:
                    message.imageWidth = reader.int32();
                    break;
                case /* optional int32 image_height */ 14:
                    message.imageHeight = reader.int32();
                    break;
                case /* optional int32 view_index */ 15:
                    message.viewIndex = reader.int32();
                    break;
                case /* optional int32 view_type */ 16:
                    message.viewType = reader.int32();
                    break;
                case /* optional int32 camera_num */ 17:
                    message.cameraNum = reader.int32();
                    break;
                case /* optional int32 scale_width */ 18:
                    message.scaleWidth = reader.int32();
                    break;
                case /* optional int32 scale_height */ 19:
                    message.scaleHeight = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Conf, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool data_img = 1; */
        if (message.dataImg !== undefined)
            writer.tag(1, WireType.Varint).bool(message.dataImg);
        /* optional string ec_img_channel = 2; */
        if (message.ecImgChannel !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.ecImgChannel);
        /* optional string record_img_channel = 3; */
        if (message.recordImgChannel !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.recordImgChannel);
        /* optional bool compress = 4; */
        if (message.compress !== undefined)
            writer.tag(4, WireType.Varint).bool(message.compress);
        /* optional bool ros_img_raw = 5; */
        if (message.rosImgRaw !== undefined)
            writer.tag(5, WireType.Varint).bool(message.rosImgRaw);
        /* optional bool ros_img_compress = 6; */
        if (message.rosImgCompress !== undefined)
            writer.tag(6, WireType.Varint).bool(message.rosImgCompress);
        /* optional string logpath = 7; */
        if (message.logpath !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.logpath);
        /* optional ec.mipi.LogLevel loglevel = 8; */
        if (message.loglevel !== undefined)
            writer.tag(8, WireType.Varint).int32(message.loglevel);
        /* optional bool camera8 = 9; */
        if (message.camera8 !== undefined)
            writer.tag(9, WireType.Varint).bool(message.camera8);
        /* optional bool camera9 = 10; */
        if (message.camera9 !== undefined)
            writer.tag(10, WireType.Varint).bool(message.camera9);
        /* optional bool camera10 = 11; */
        if (message.camera10 !== undefined)
            writer.tag(11, WireType.Varint).bool(message.camera10);
        /* optional bool camera11 = 12; */
        if (message.camera11 !== undefined)
            writer.tag(12, WireType.Varint).bool(message.camera11);
        /* optional int32 image_width = 13; */
        if (message.imageWidth !== undefined)
            writer.tag(13, WireType.Varint).int32(message.imageWidth);
        /* optional int32 image_height = 14; */
        if (message.imageHeight !== undefined)
            writer.tag(14, WireType.Varint).int32(message.imageHeight);
        /* optional int32 view_index = 15; */
        if (message.viewIndex !== undefined)
            writer.tag(15, WireType.Varint).int32(message.viewIndex);
        /* optional int32 view_type = 16; */
        if (message.viewType !== undefined)
            writer.tag(16, WireType.Varint).int32(message.viewType);
        /* optional int32 camera_num = 17; */
        if (message.cameraNum !== undefined)
            writer.tag(17, WireType.Varint).int32(message.cameraNum);
        /* optional int32 scale_width = 18; */
        if (message.scaleWidth !== undefined)
            writer.tag(18, WireType.Varint).int32(message.scaleWidth);
        /* optional int32 scale_height = 19; */
        if (message.scaleHeight !== undefined)
            writer.tag(19, WireType.Varint).int32(message.scaleHeight);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ec.mipi.Conf
 */
export const Conf = new Conf$Type();
